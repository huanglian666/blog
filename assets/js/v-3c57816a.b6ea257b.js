"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[4980],{75609:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3c57816a",path:"/javase/senior/04_%E5%8F%8D%E5%B0%84.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、Java反射机制概述",slug:"一、java反射机制概述",children:[{level:3,title:"1.1、概述",slug:"_1-1、概述",children:[]},{level:3,title:"1.2、反射的应用",slug:"_1-2、反射的应用",children:[]},{level:3,title:"1.3、反射涉及的类",slug:"_1-3、反射涉及的类",children:[]}]},{level:2,title:"二、Class类及反射的原理",slug:"二、class类及反射的原理",children:[]},{level:2,title:"三、反射相关操作",slug:"三、反射相关操作",children:[{level:3,title:"3.1、获取Class类的实例(重点)",slug:"_3-1、获取class类的实例-重点",children:[]},{level:3,title:"3.2、创建对象(重点)",slug:"_3-2、创建对象-重点",children:[]},{level:3,title:"3.3、获取运行时类的指定结构(重点)",slug:"_3-3、获取运行时类的指定结构-重点",children:[]},{level:3,title:"3.4、获取运行时类的完整结构",slug:"_3-4、获取运行时类的完整结构",children:[]}]}],filePathRelative:"javase/senior/04_反射.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},22471:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var p=a(66252);const e=a.p+"assets/img/Class.52bc7ab8.jpg",t=(0,p.uE)('<h2 id="一、java反射机制概述" tabindex="-1"><a class="header-anchor" href="#一、java反射机制概述" aria-hidden="true">#</a> 一、Java反射机制概述</h2><h3 id="_1-1、概述" tabindex="-1"><a class="header-anchor" href="#_1-1、概述" aria-hidden="true">#</a> 1.1、概述</h3><blockquote><p><code>Reflection</code>(反射)是被视为<strong>动态语言</strong>的关键，反射机制允许程序在执行期借助于<code>Reflection API</code>取得任何类的内部信息，并能直接操作任意对象的内 部属性及方法。</p><p>加载完类之后，在堆内存的方法区中就产生了一个<code>Class</code>类型的对象(一个类只有一个<code>Class</code>对象)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看 到类的结构，所以，我们形象的称之为：<strong>反射</strong>。</p><ul><li>正常的方式：引入需要的全类名 -&gt; 通过<code>new</code>实例化 -&gt; 取得实例化对象</li><li>反射方式：实例化对象 -&gt; 反射相关API -&gt; 得到完整的全类名</li></ul><p>关于动态语言和静态语言：</p><ul><li>动态语言，是一类在运行时可以改变其结构的语言。例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在<strong>运行时代码可以根据某些条件改变自身结构</strong>。例如：Python、JavaScript、C#</li><li>静态语言，与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、 C++。</li><li>Java不是动态语言，但Java可以称之为<strong>准动态语言</strong>。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。</li></ul></blockquote><h3 id="_1-2、反射的应用" tabindex="-1"><a class="header-anchor" href="#_1-2、反射的应用" aria-hidden="true">#</a> 1.2、反射的应用</h3><blockquote><p>在框架开发中，都是基于配置文件开发。</p><p>在配置文件中配置了类，可以通过反射得到<strong>类中的所有内容</strong>，可以通过这些内容实现对象的创建，属性的修改，方法的调用。</p><p>类中的所有内容：</p><ul><li>属性</li><li>构造方法 <ul><li>无参构造方法</li><li>有参构造方法</li></ul></li><li>普通方法</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> addr<span class="token punctuation">;</span>\n\n    <span class="token comment">//默认构造方法</span>\n    <span class="token comment">//带参数的构造方法</span>\n\t<span class="token comment">//get和set</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;run...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//创建对象</span>\n        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//调用对象的方法</span>\n        person<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取Class类的对象</span>\n        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.qfedu.test17.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过默认方法创建Person对象</span>\n        <span class="token class-name">Object</span> o <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取Method</span>\n        <span class="token class-name">Method</span> run <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//执行run方法</span>\n        run<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="_1-3、反射涉及的类" tabindex="-1"><a class="header-anchor" href="#_1-3、反射涉及的类" aria-hidden="true">#</a> 1.3、反射涉及的类</h3><blockquote><p><code>java.lang.Class</code>：代表一个类</p><p><code>java.lang.reflect.Method</code>：代表类的方法</p><p><code>java.lang.reflect.Field</code>：代表类的成员变量</p><p><code>java.lang.reflect.Constructor</code>：代表类的构造器</p></blockquote><h2 id="二、class类及反射的原理" tabindex="-1"><a class="header-anchor" href="#二、class类及反射的原理" aria-hidden="true">#</a> 二、<code>Class</code>类及反射的原理</h2><p><img src="'+e+'" alt=""></p><blockquote><p><code>Class</code>本身也是一个类，一个加载的类在JVM中只会有一个<code>Class</code>对象，一个<code>Class</code>对象对应的是一个加载到JVM中的一个<code>.class</code>文件。</p><p>通过<code>Class</code>可以完整地得到一个类中的所有被加载的结构。<code>Class</code>类是反射的根源，针对任何你想动态加载、运行的类，唯有先获得相应的<code>Class</code>对象。</p></blockquote><h2 id="三、反射相关操作" tabindex="-1"><a class="header-anchor" href="#三、反射相关操作" aria-hidden="true">#</a> 三、反射相关操作</h2><h3 id="_3-1、获取class类的实例-重点" tabindex="-1"><a class="header-anchor" href="#_3-1、获取class类的实例-重点" aria-hidden="true">#</a> 3.1、获取<code>Class</code>类的实例(重点)</h3><blockquote><ul><li><code>类名.class</code>效率最高</li><li><code>对象.getClass</code></li><li><code>Class.forName(&quot;全类名&quot;)</code>可能出现异常</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest3</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取Class类对象的三种方式</span>\n        <span class="token comment">//类名.class</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c1 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//对象.getClass() getClass()是Object类中的方法</span>\n        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c2 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//Class.forName(全类名)</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.qfedu.test17.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2 <span class="token operator">==</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><blockquote><p>哪些类型可以有<code>Class</code>对象：</p><ul><li><code>class</code>类</li><li><code>interface</code>接口</li><li><code>[]</code>数组</li><li><code>enum</code>枚举</li><li><code>annotation</code>注解</li><li>基本数据类型</li><li><code>void</code></li></ul></blockquote><h3 id="_3-2、创建对象-重点" tabindex="-1"><a class="header-anchor" href="#_3-2、创建对象-重点" aria-hidden="true">#</a> 3.2、创建对象(重点)</h3><blockquote><p>要创建类的对象，可以<code>new</code>，不使用<code>new</code>，如何创建？</p></blockquote><h4 id="_3-2-1、操作无参数的构造方法" tabindex="-1"><a class="header-anchor" href="#_3-2-1、操作无参数的构造方法" aria-hidden="true">#</a> 3.2.1、操作无参数的构造方法</h4><blockquote><p><code>Object newInstance() </code>：调用默认构造函数，返回该<code>Class</code>对象的一个实例</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest4</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取Class对象</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.qfedu.test17.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//操作默认的构造方法创建对象</span>\n        <span class="token class-name">Object</span> o <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断o是否是Person类的对象</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>\n        p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_3-2-2、操作有参数的构造方法" tabindex="-1"><a class="header-anchor" href="#_3-2-2、操作有参数的构造方法" aria-hidden="true">#</a> 3.2.2、操作有参数的构造方法</h4><blockquote><p><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code>：取得本类的指定形参类型的构造器</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest5</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取Class对象</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.qfedu.test17.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取有参的构造方法</span>\n        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//调用有参的构造方法创建对象</span>\n        <span class="token class-name">Object</span> o <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&quot;qd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断o是否是Person类的对象</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>\n        p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_3-3、获取运行时类的指定结构-重点" tabindex="-1"><a class="header-anchor" href="#_3-3、获取运行时类的指定结构-重点" aria-hidden="true">#</a> 3.3、获取运行时类的指定结构(重点)</h3><h4 id="_3-3-1、获取属性" tabindex="-1"><a class="header-anchor" href="#_3-3-1、获取属性" aria-hidden="true">#</a> 3.3.1、获取属性</h4><blockquote><p>在反射机制中，可以直接通过<code>Field</code>类操作类中的属性，通过<code>Field</code>类提供的<code>set()</code>和<code>get()</code>方法就可以完成设置和取得属性内容的操作。</p><p>通过<code>Class</code>类的对象获取<code>Field</code>：</p><ul><li><code>public Field getField(String name)</code>：返回此<code>Class</code>对象表示的类或接口的指定的<code>public</code>的<code>Field</code>；</li><li><code>public Field getDeclaredField(String name)</code>：返回此<code>Class</code>对象表示的类或接口的指定的<code>Field</code>。</li></ul><p>在<code>Field</code>中：</p><ul><li><code>public Object get(Object obj)</code>：取得指定对象<code>obj</code>上此<code>Field</code>的属性内容；</li><li><code>public void set(Object obj,Object value)</code>： 设置指定对象<code>obj</code>上此<code>Field</code>的属性内容。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest6</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取Class对象</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.qfedu.test17.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//操作默认的构造方法创建对象</span>\n        <span class="token class-name">Object</span> o <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断o是否是Person类的对象</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//获取属性Field</span>\n        <span class="token class-name">Field</span> name <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置允许访问</span>\n        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置属性</span>\n        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_3-3-2、获取方法" tabindex="-1"><a class="header-anchor" href="#_3-3-2、获取方法" aria-hidden="true">#</a> 3.3.2、获取方法</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest7</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取Class对象</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.qfedu.test17.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//操作默认的构造方法创建对象</span>\n        <span class="token class-name">Object</span> o <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断o是否是Person类的对象</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Method</span> method <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//执行方法</span>\n        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_3-3-3、综合案例" tabindex="-1"><a class="header-anchor" href="#_3-3-3、综合案例" aria-hidden="true">#</a> 3.3.3、综合案例</h4><blockquote><p>创建配置文件，设置类和要运行的方法，通过反射的方式运行配置文件中的方法</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest8</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//加载并解析配置文件</span>\n        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;a.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> myclass <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;myclass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> mymethod <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;mymethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//System.out.println(myclass);</span>\n        <span class="token comment">//System.out.println(mymethod);</span>\n\n        <span class="token comment">//获取Class类的对象</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>myclass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//创建Class类的对象的实例对象</span>\n        <span class="token class-name">Object</span> o <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取Method</span>\n        <span class="token class-name">Method</span> method <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>mymethod<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//执行method</span>\n        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><blockquote><p>配置文件</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>myclass<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>test17<span class="token punctuation">.</span></span>Person</span>\nmymethod<span class="token operator">=</span>run\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-4、获取运行时类的完整结构" tabindex="-1"><a class="header-anchor" href="#_3-4、获取运行时类的完整结构" aria-hidden="true">#</a> 3.4、获取运行时类的完整结构</h3><blockquote><p>完整结构包括的内容：</p><ul><li>实现的全部接口</li><li>所继承的父类</li><li>全部的构造器</li><li>全部的方法</li><li>全部的<code>Field</code></li></ul><p>获取实现的全部接口：</p><ul><li><code>public Class[] getInterfaces()</code>：获取此对象所表示的类或接口实现的接口</li></ul><p>获得所继承的父类：</p><ul><li><code> public Class getSuperclass()</code></li></ul><p>获取全部的构造方法：</p><ul><li><code>public Constructor[] getConstructors()</code></li><li><code>public Constructor[] getDeclaredConstructors()</code></li></ul><p>获取全部的方法：</p><ul><li><code> public Method[] getDeclaredMethods()</code></li><li><code>public Method[] getMethods() </code></li></ul><p>获取全部的<code>Field</code>：</p><ul><li><code>public Field[] getFields()</code></li><li><code>public Field[] getDeclaredFields()</code></li></ul></blockquote>',37),c={},o=(0,a(83744).Z)(c,[["render",function(n,s){return t}]])}}]);