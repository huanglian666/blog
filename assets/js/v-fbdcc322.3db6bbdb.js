"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[2836],{71406:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-fbdcc322",path:"/javase/senior/03_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、概述",slug:"一、概述",children:[]},{level:2,title:"二、网络通信要素",slug:"二、网络通信要素",children:[{level:3,title:"2.1、网络协议",slug:"_2-1、网络协议",children:[]},{level:3,title:"2.2、IP地址和端口号",slug:"_2-2、ip地址和端口号",children:[]}]},{level:2,title:"三、基于TCP协议的网络编程",slug:"三、基于tcp协议的网络编程",children:[{level:3,title:"3.1、服务端",slug:"_3-1、服务端",children:[]},{level:3,title:"3.2、客户端",slug:"_3-2、客户端",children:[]},{level:3,title:"3.3、支持多客户端的服务器",slug:"_3-3、支持多客户端的服务器",children:[]}]},{level:2,title:"四、基于UDP协议的网络编程",slug:"四、基于udp协议的网络编程",children:[]}],filePathRelative:"javase/senior/03_网络编程.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},7878:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(66252);const t=a.p+"assets/img/OSI参考模式.49889c6e.jpg",e=a.p+"assets/img/TCPIP协议.cb1224e3.jpg",c=a.p+"assets/img/协议对应关系.05d7a8f1.jpg",o=a.p+"assets/img/三次握手.88a79254.jpg",l=a.p+"assets/img/四次挥手.35e8f19c.jpg",u=(0,p.uE)('<h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h2><blockquote><p>概念：</p><ul><li>用Java语言实现计算机间数据的信息传递和资源共享；</li><li>其它编程语言也可以实现网络编程。</li></ul><p>目的：</p><ul><li>直接或间接地通过网络协议与其它计算机进行通讯。</li></ul><p>需要解决的问题：</p><ul><li>如何准确地定位网络上一台或多台主机；</li><li>如何定位主机上的特定应用；</li><li>找到主机后如何可靠高效地进行数据传输。</li></ul></blockquote><h2 id="二、网络通信要素" tabindex="-1"><a class="header-anchor" href="#二、网络通信要素" aria-hidden="true">#</a> 二、网络通信要素</h2><blockquote><p>如何实现网络中的主机互相通信？</p><ul><li>一定的规则（即：网络通信协议。有两套参考模型） <ul><li><code>OSI</code>参考模型</li><li><code>TCP/IP</code>参考模型(或<code>TCP/IP</code>协议)</li></ul></li><li>通信双方地址 <ul><li>IP地址</li><li>端口号</li></ul></li></ul></blockquote><h3 id="_2-1、网络协议" tabindex="-1"><a class="header-anchor" href="#_2-1、网络协议" aria-hidden="true">#</a> 2.1、网络协议</h3><blockquote><p>一种规则，人和人交流有语言的规则，计算机之间通过网络交流也要有网络的规则。</p></blockquote><h4 id="_2-1-1、osi参考模型" tabindex="-1"><a class="header-anchor" href="#_2-1-1、osi参考模型" aria-hidden="true">#</a> 2.1.1、<code>OSI</code>参考模型</h4><p><img src="'+t+'" alt=""></p><blockquote><p>模型过于理想化，未能在因特网上进行广泛推广。</p></blockquote><h4 id="_2-1-2、tcp-ip协议" tabindex="-1"><a class="header-anchor" href="#_2-1-2、tcp-ip协议" aria-hidden="true">#</a> 2.1.2、<code>TCP\\IP</code>协议</h4><p><img src="'+e+'" alt=""></p><blockquote><p>出现较早，事实上的标准。</p><p>两种协议之间存在对应关系：</p></blockquote><p><img src="'+c+'" alt=""></p><blockquote><p><code>TCP/IP</code>以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</p></blockquote><h4 id="_2-1-3、tcp和udp" tabindex="-1"><a class="header-anchor" href="#_2-1-3、tcp和udp" aria-hidden="true">#</a> 2.1.3、<code>TCP</code>和<code>UDP</code></h4><blockquote><p><code>TCP</code>协议：</p><ul><li>使用<code>TCP</code>协议前，须先建立<code>TCP</code>连接，形成传输数据通道；</li><li>传输前，采用<strong>三次握手</strong>方式，是可靠的；</li><li>TCP协议进行通信的两个应用进程：<strong>客户端</strong>、<strong>服务端</strong>；</li><li>在连接中可进行大数据量的传输；</li><li>传输完毕，使用<strong>四次挥手</strong>方式，释放连接，结束传输，效率低。</li></ul><p><code>UDP</code>协议：</p><ul><li>将数据、源、目的封装成数据包，不需要建立连接；</li><li>每个数据报的大小限制在64KB内；</li><li>因无需连接，故是不可靠的；</li><li>发送数据结束时无需释放资源，速度快。</li></ul><p>三次握手过程：</p></blockquote><p><img src="'+o+'" alt=""></p><blockquote><p>四次挥手过程：</p></blockquote><p><img src="'+l+'" alt=""></p><blockquote><p>为什么建立连接握手三次，关闭连接时需要是四次呢？</p><p>TCP握手的时候，接收端发送<code>SYN+ACK</code>的包是将一个<code>ACK</code>和一个<code>SYN</code>合并到一个包中，所以减少了一次包的发送，三次完成握手。</p><p>对于四次挥手，因为TCP是全双工通信，在主动关闭方发送FIN包后，接收端可能还要发送数据，不能立即关闭服务器端到客户端的数据通道，所以也就不能将服务器端的<code>FIN</code>包与对客户端的<code>ACK</code>包合并发送，只能先确认 <code>ACK</code>，然后服务器待无需发送数据时再发送<code>FIN</code>包，所以四次挥手时必须是四次数据包的交互。</p></blockquote><h3 id="_2-2、ip地址和端口号" tabindex="-1"><a class="header-anchor" href="#_2-2、ip地址和端口号" aria-hidden="true">#</a> 2.2、<code>IP</code>地址和端口号</h3><h4 id="_2-2-1、ip地址" tabindex="-1"><a class="header-anchor" href="#_2-2-1、ip地址" aria-hidden="true">#</a> 2.2.1、<code>IP</code>地址</h4><blockquote><p>唯一的标识Internet上的计算机（通信实体）。</p><p>本地回环地址：<code>127.0.0.1</code>。</p><p><code>IP</code>地址分类方式1：</p><ul><li><code>IPV4</code>：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如<code>192.168.0.1</code></li><li><code>IPV6</code>：128位(16个字节)，写成8个无符号整数，每个整数用四个十六进制位表示， 数之间用冒号<code>:</code>分开，如：<code>3ffe:3201:1401:1280:c8ff:fe4d:db39:198</code></li></ul><p><code>IP</code>地址分类方式2：</p><ul><li>公网地址(万维网使用)和私有地址(局域网使用)。一般<code>192.168.</code>开头的就是私有址址，范围即为<code>192.168.0.0--192.168.255.255</code>，专门为组织机构内部使用。</li></ul></blockquote><h4 id="_2-2-2、端口号" tabindex="-1"><a class="header-anchor" href="#_2-2-2、端口号" aria-hidden="true">#</a> 2.2.2、端口号</h4><blockquote><p><strong>端口号</strong>标识正在计算机上运行的进程(程序)，不同的进程有不同的端口号。端口号是一个<code>16</code>位的整数<code>0~65535</code>。</p><p>端口分类：</p><ul><li>公认端口：<code>0~1023</code>。被预先定义的服务通信占用(如：HTTP占用端口 80，FTP占用端口21，Telnet占用端口23)；</li><li>注册端口：<code>1024~49151</code>。分配给用户进程或应用程序(如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等)。</li><li>动态/私有端口：<code>49152~65535</code>。</li></ul><p>端口号与<code>IP</code>地址的组合得出一个网络套接字<code>Socket</code>。</p></blockquote><h4 id="_2-2-3、inetaddress类" tabindex="-1"><a class="header-anchor" href="#_2-2-3、inetaddress类" aria-hidden="true">#</a> 2.2.3、<code>InetAddress</code>类</h4><blockquote><p>Internet上的主机有两种方式表示地址：</p><ul><li>域名，<code>stage1.codeaction.org</code></li><li><code>IP</code>地址：<code>216.127.178.187</code></li></ul><p><code>InetAddress</code>作用主要是表示IP地址，它有两个子类：</p><ul><li><code>Inet4Address</code></li><li><code>Inet6Address</code></li></ul><p><code>InetAddress</code>类对象含有一个Internet主机地址的域名和IP地址：</p><ul><li><code>stage1.codeaction.org</code></li><li><code>216.127.178.187</code></li></ul><p>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。域名解析过程：</p><ul><li>先找本机<code>hosts</code>文件，是否有输入的域名地址；</li><li>没有的话，再通过DNS服务器，找主机。</li></ul><p><code>InetAddress</code>类没有提供公共的构造器，而是提供了如下几个静态方法来获取<code>InetAddress</code>实例：</p><ul><li><code>public static InetAddress getLocalHost()</code></li><li><code>public static InetAddress getByName(String host) </code></li></ul><p><code>InetAddress</code>提供了如下几个常用的方法：</p><ul><li><code>public String getHostAddress()</code>：返回<code>IP</code>地址字符串(以文本表现形式)</li><li><code>public String getHostName()</code>：获取此<code>IP</code>地址的主机名</li><li><code>public boolean isReachable(int timeout)</code>：测试是否可以达到该地址</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest1</span> <span class="token punctuation">{</span>\n\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 对InetAdrress进行测试\n\t\t * InetAddress表示的是IP地址\n\t\t * */</span>\n\t\t<span class="token comment">//获取InetAddress对象1</span>\n\t\t<span class="token comment">//InetAddress address = InetAddress.getByName(&quot;127.0.0.1&quot;);</span>\n\t\t<span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;stage1.codeaction.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//网址--域名</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token class-name">InetAddress</span> l1 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//获取InetAddress对象2</span>\n        <span class="token class-name">InetAddress</span> l2 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t\t<span class="token comment">//获取IP地址</span>\n\t\t<span class="token class-name">String</span> ip <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//获取主机名</span>\n\t\t<span class="token class-name">String</span> hostName <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//测试主机是否可达 毫秒</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address2<span class="token punctuation">.</span><span class="token function">isReachable</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h4 id="_2-2-4、网络套接字socket" tabindex="-1"><a class="header-anchor" href="#_2-2-4、网络套接字socket" aria-hidden="true">#</a> 2.2.4、网络套接字<code>Socket</code></h4><blockquote><p>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。</p><p>网络上具有唯一标识的<code>IP</code>地址和端口号组合在一起才能构成唯一能识别的标志套接字。</p><p>通信的两端都要有<code>Socket</code>，是两台机器间通信的端点。</p><p>网络通信其实就是<code>Socket</code>间的通信。</p><p><code>Socket</code>允许程序把网络连接当成一个流，数据在两个<code>Socket</code>间通过<code>IO</code>传输。</p><p>一般主动发起通信的应用程序属<code>客户端</code>，等待通信请求的为<code>服务端</code>。</p><p><code>Socket</code>分类：</p><ul><li>流套接字(stream socket)：使用<code>TCP</code>提供<strong>可依赖</strong>的字节流服务；</li><li>数据报套接字(datagram socket)：使用<code>UDP</code>提供<strong>尽力而为</strong>的数据报服务。</li></ul><p><code>Socket</code>类的常用构造器：</p><ul><li><code>public Socket(InetAddress address, int port)</code>创建一个流套接字并将其连接到指定<code>IP</code>地址的指定端口号；</li><li><code>public Socket(String host, int port)</code>创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ul><p><code>Socket</code>类的常用方法：</p><ul><li><code>getLocalAddress()</code>：返回本地<code>Socket</code>中的<code>IP</code>的<code>InetAddress</code>对象；</li><li><code>getLocalPort()</code>：返回本地<code>Socket</code>中的端口号；</li><li><code>getInetAddress()</code>：返回对方<code>Socket</code>中<code>IP</code>地址；</li><li><code>getPort()</code>：返回对方<code>Socket</code>中的端口号；</li><li><code>close()</code>：关闭套接字；</li><li><code>getInputStream()</code>：获取输入流，用来读取数据；</li><li><code>getOutputStream()</code>：获取输出流，用来发送数据。</li></ul></blockquote><h2 id="三、基于tcp协议的网络编程" tabindex="-1"><a class="header-anchor" href="#三、基于tcp协议的网络编程" aria-hidden="true">#</a> 三、基于<code>TCP</code>协议的网络编程</h2><h3 id="_3-1、服务端" tabindex="-1"><a class="header-anchor" href="#_3-1、服务端" aria-hidden="true">#</a> 3.1、服务端</h3><blockquote><p>服务器程序的工作过程包含以下四个基本的步骤：</p><ol><li>调用<code>ServerSocket(int port)</code>：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求；</li><li>调用<code>accept()</code>：<strong>监听</strong>连接请求，如果客户端请求连接，则<strong>接收连接</strong>，返回套接字对象；</li><li>调用该<code>Socket</code>类对象的<code>getOutputStream()</code>和<code>getInputStream()</code>，获取输出流和输入流，开始网络数据的发送和接收；</li><li>关闭<code>ServerSocket</code>和<code>Socket</code>对象，客户端访问结束，关闭通信套接字。</li></ol><p><code>ServerSocket</code>对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，<strong>服务器必须事先建立一个等待客户请求建立套接字连接的<code>ServerSocket</code>对象</strong>，这个对象称为监听套接字。</p><p>所谓<strong>接收</strong>客户的套接字请求，就是<code>accept()</code>方法会返回一个<code>Socket</code>对象，这个对象称为<strong>已连接套接字</strong>。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>\n\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 创建服务器\n\t\t */</span>\n\t\t<span class="token comment">// 创建监听套接字</span>\n\t\t<span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 监听----&gt;返回已连接套接字</span>\n\t\t\t<span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 获取对方地址信息</span>\n\t\t\t<span class="token class-name">InetAddress</span> clientAddress <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">int</span> port <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clientAddress<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;连接, 端口号：&quot;</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 获取IO流</span>\n\t\t\t<span class="token class-name">InputStream</span> in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t\t<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// 获取客户端发送的消息</span>\n\t\t\t\t<span class="token keyword">int</span> len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token comment">// 判断客户端是否关闭</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t<span class="token comment">// 将接受到的内容进行转换</span>\n\t\t\t\tstr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\n\t\t\tsocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token comment">// serverSocket.close();</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="_3-2、客户端" tabindex="-1"><a class="header-anchor" href="#_3-2、客户端" aria-hidden="true">#</a> 3.2、客户端</h3><blockquote><p>客户端<code>Socket</code>的工作过程包含以下四个基本的步骤：</p><ol><li>创建<code>Socket</code>：根据指定服务端的<code>IP</code>地址或端口号构造<code>Socket</code>类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常；</li><li>打开连接到<code>Socket</code>的输入/出流： 使用<code>getInputStream()</code>方法获得输入流，使用<code>getOutputStream()</code>方法获得输出流，进行数据传输；</li><li>按照一定的协议对<code>Socket</code>进行读/写操作：通过输入流读取服务器放入线路的信息 （但不能读取自己放入线路的信息），通过输出流将信息写入线程；</li><li>关闭<code>Socket</code>：断开客户端到服务器的连接，释放线路。</li></ol></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">UnknownHostException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>\n\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 客户端\n\t\t * */</span>\n\t\t<span class="token comment">/*\n\t\t * 创建套接字\n\t\t * 需要制定服务器的IP地址和端口号\n\t\t * 只要返回，就说明和服务器建立了连接\n\t\t * */</span>\n\t\t<span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//获取IO流，进行IO操作</span>\n\t\t<span class="token class-name">OutputStream</span> out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">//获取用户输入的信息</span>\n\t\t\tstr <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">//用户输入exit退出</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token comment">//发送到服务器</span>\n\t\t\tout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token comment">//关闭socket</span>\n\t\tsocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="_3-3、支持多客户端的服务器" tabindex="-1"><a class="header-anchor" href="#_3-3、支持多客户端的服务器" aria-hidden="true">#</a> 3.3、支持多客户端的服务器</h3><blockquote><p>使用多线程</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">LinkThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">InetAddress</span> address <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> hostAddress <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> port <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostAddress <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">&quot;已连接&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostAddress <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">&quot;---&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//创建监听套接字</span>\n        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//获取已连接套接字</span>\n            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">LinkThread</span> linkThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkThread</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            linkThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h2 id="四、基于udp协议的网络编程" tabindex="-1"><a class="header-anchor" href="#四、基于udp协议的网络编程" aria-hidden="true">#</a> 四、基于<code>UDP</code>协议的网络编程</h2><blockquote><p>类<code>DatagramSocket</code>和<code>DatagramPacket</code>实现了基于<code>UDP</code>协议网络程序。</p><p><code>UDP</code>数据报通过数据报套接字<code>DatagramSocket</code>发送和接收，系统不保证<code>UDP</code>数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</p><p><code>DatagramPacket</code>对象封装了<code>UDP</code>数据报，在数据报中包含了发送端的<code>IP</code>地址和端口号以及接收端的<code>IP</code>地址和端口号。</p><p><code>UDP</code>协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</p><p><code>DatagramSocket</code>类的常用方法：</p><ul><li><code>public DatagramSocket(int port)</code>：创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，<code>IP</code>地址由内核来选择；</li><li><code>public DatagramSocket(int port,InetAddress laddr)</code>：创建数据报套接字，将其绑定到指定的本地地址。 本地端口必须在0到65535之间（包括两者）。如果IP地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择；</li><li><code>public void close()</code>：关闭此数据报套接字；</li><li><code>public void send(DatagramPacket p)</code>：从此套接字发送数据报包。<code>DatagramPacket</code>包含的信息指示：将要发送的数据、其长度、远程主机的<code>IP</code>地址和远程主机的端口号；</li><li><code>public void receive(DatagramPacket p)</code>：从此套接字接收数据报包。当此方法返回时，<code>DatagramPacket</code>的缓冲区填充了接收的数据。数据报包也包含发送方的<code>IP</code>地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的<code>length</code>字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短；</li><li><code>public InetAddress getLocalAddress()</code>：获取套接字绑定的本地地址；</li><li><code>public int getLocalPort()</code>：返回此套接字绑定的本地主机上的端口号；</li><li><code>public InetAddress getInetAddress()</code>：返回此套接字连接的地址。如果套接字未连接，则返回<code>null</code>；</li><li><code>public int getPort()</code>：返回此套接字的端口。如果套接字未连接，则返回<code>-1</code>。</li></ul><p><code>DatagramPacket</code>类的常用方法：</p><ul><li><code>public DatagramPacket(byte[] buf,int length)</code>：构造<code>DatagramPacket</code>，用来接收长度为<code>length</code>的数据包。<code>length</code>参数必须小于等于<code>buf.length</code>；</li><li><code>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)</code>：构造数据报包，用来将长度为<code>length</code>的包发送到指定主机上的指定端口号。<code>length</code>参数必须小于等于<code>buf.length</code>；</li><li><code>public InetAddress getAddress()</code>：返回某台机器的<code>IP</code>地址，此数据报将要发往该机器或者是从该机器接收到的；</li><li><code>public int getPort()</code>：返回某台远程主机的端口号，此数据报将要发往该主机或 者是从该主机接收到的。</li><li><code>public byte[] getData()</code>：返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量<code>offset</code>处开始，持续<code>length</code>长度；</li><li><code>public int getLength()</code>：返回将要发送或接收到的数据的长度。</li></ul><p><code>UDP</code>网络通信流程：</p><ol><li>建立发送端、接收端；</li><li>建立数据包；</li><li>调用<code>Socket</code>的发送、接收方法；</li><li>关闭<code>Socket</code>。</li></ol><p>发送端与接收端是两个独立的运行程序。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recv</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DatagramSocket</span> datagramSocket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            datagramSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            datagramSocket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//System.out.println(Arrays.toString(arr));</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>datagramSocket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                datagramSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Send</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div>',43),i={},k=(0,a(83744).Z)(i,[["render",function(n,s){return u}]])}}]);