"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[8155],{57877:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-204d7f12",path:"/javase/senior/01_IO.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、File类",slug:"一、file类",children:[]},{level:2,title:"二、IO流概述",slug:"二、io流概述",children:[{level:3,title:"2.1、什么是IO流",slug:"_2-1、什么是io流",children:[]},{level:3,title:"2.2、IO流分类",slug:"_2-2、io流分类",children:[]},{level:3,title:"2.3、IO流处理流程",slug:"_2-3、io流处理流程",children:[]}]},{level:2,title:"三、字节流",slug:"三、字节流",children:[{level:3,title:"3.1、InputStream",slug:"_3-1、inputstream",children:[]},{level:3,title:"3.2、OutputStream",slug:"_3-2、outputstream",children:[]},{level:3,title:"3.3、字节流实现文件拷贝",slug:"_3-3、字节流实现文件拷贝",children:[]}]},{level:2,title:"四、字符流",slug:"四、字符流",children:[{level:3,title:"4.1、Reader",slug:"_4-1、reader",children:[]},{level:3,title:"4.2、Writer",slug:"_4-2、writer",children:[]},{level:3,title:"4.3、字符流实现文件拷贝",slug:"_4-3、字符流实现文件拷贝",children:[]}]},{level:2,title:"五、缓冲流",slug:"五、缓冲流",children:[{level:3,title:"5.1、使用缓冲流实现文件拷贝",slug:"_5-1、使用缓冲流实现文件拷贝",children:[]},{level:3,title:"5.2、按行读取",slug:"_5-2、按行读取",children:[]}]}],filePathRelative:"javase/senior/01_IO.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},28077:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h2 id="一、file类" tabindex="-1"><a class="header-anchor" href="#一、file类" aria-hidden="true">#</a> 一、<code>File</code>类</h2><blockquote><p><code>File</code>类被定义为<strong>文件和目录路径名的抽象表示形式</strong>，这是因为<code>File</code>类既可以表示<strong>文件</strong>也可以表示<strong>目录</strong>，他们都通过对应的路径来描述。</p><p>通过构造函数创建一个<code>File</code>类对象，则该对象就是指定文件的引用，可以通过该对象对文件操作。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//创建一个File类对象f,可通过f对temp.txt进行操作</span>\n<span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\temp.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>路径分隔符：</p><ul><li>Windows下路径分隔符使用反斜线<code>\\</code>，而Java程序中的反斜线表示转义字符，如果需要在Windows路径下使用反斜线，则应使用两条反斜线，如：<code>C:\\\\mytest.txt</code></li><li>使用斜线<code>/”</code>，Java程序支持将斜线当成平台无关的路径分隔符。</li></ul><p><code>File</code>类常见方法：</p><ul><li><code>boolean isHidden()</code>：判断是否是隐藏文件</li><li><code>boolean canRead()</code>：是否可读</li><li><code>boolean canWrite()</code>：是否可写</li><li><code>String getAbsolutePath()</code>：获取文件的绝对路径</li><li><code>String getName()</code>：获取文件名</li><li><code>boolean isDirectory()</code>：是否是目录</li><li><code>boolean isFile()</code>：是否是文件</li><li><code>boolean mkdir()</code>：创建目录</li><li><code>long lastModified()</code>：最后修改时间</li><li><code>long length()</code>：文件长度</li><li><code>File[] listFiles()</code>：返回目录下的所有文件和目录</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest1</span> <span class="token punctuation">{</span>\n    <span class="token comment">/*\n     * I---input\n     * O---output\n     * IO--输入输出(键盘 显示器 硬盘 网络)\n     * \t|---File类---文件和目录(文件夹)的抽象表示形式---File类将文件当成一个整体，不能对文件的内容进行操作，如果对文件的内容操作，需要使用IO流\n     * \t\t\t\t通过File类的对象和文件或目录建立关联，操作File类的对象，就是操作相应的文件或者目录\n     *\n     * \t|---IO流\n     * */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//创建File类的对象  java.io....</span>\n        <span class="token comment">/*\n         * 文件的路径有两种写法\n         * C:\\\\Users\\\\Raymond\\\\Desktop\\\\test\\\\a.txt\n         * C:/Users/Raymond/Desktop/test/a.txt\n         *\n         * \\ 转义字符----和其后的第一个字符结合，表示特殊的含义    \\n \\t\n         * 如果要表示\\,必须写两条\\\n         *\n         * */</span>\n        <span class="token comment">//File f = new File(&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\a.txt&quot;);</span>\n        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/Maxwell/Desktop/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//File类中常见的方法</span>\n        <span class="token comment">//判断文件是否是隐藏文件</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否隐藏：&quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//大小  Byte</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件的大小:&quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//文件名</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件名:&quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//绝对路径</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;绝对路径:&quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//是否可读</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否可读：&quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//是否可写</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否可写：&quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/*\n         * 时间戳----&gt;表示时间的字符串(xxxx年xx月xx日 xx:xx:xx)\n         *\n         * SimpleDateFormat\n         * \t\t|\n         * \t  Date()\n         * \t\t|\n         * \t       时间戳\n         * 时间戳----&gt;Date()\n         * */</span>\n        <span class="token comment">//文件最后修改时间</span>\n        <span class="token keyword">long</span> lastMdate <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>lastMdate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//Date---String</span>\n        <span class="token class-name">SimpleDateFormat</span> sft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日  HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> dateStr <span class="token operator">=</span>  sft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最后修改时间:&quot;</span> <span class="token operator">+</span> dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//判断是否是文件夹</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否是文件夹:&quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/Maxwell/Desktop/test123/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断文件或文件夹是否存在</span>\n        <span class="token comment">//System.out.println(&quot;是否存在:&quot; + f1.exists());</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//不存在创建该文件夹</span>\n            <span class="token comment">//创建文件夹  Linux mkdir</span>\n            f1<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fArr <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> fArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div><blockquote><p><strong>File</strong>类中没有提供对文件的读写操作，如果要实现对文件的读写，需要通过IO流来进行操作。</p><p>案例：列出一个目录下所有的文件和目录（包括子目录中的目录和文件）</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>\n    <span class="token comment">/*\n     * f表示需要被遍历的文件夹\n     * */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> farr <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> subf <span class="token operator">:</span> farr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subf<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>subf<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">listFiles</span><span class="token punctuation">(</span>subf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/Maxwell/Desktop/test123/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">listFiles</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="二、io流概述" tabindex="-1"><a class="header-anchor" href="#二、io流概述" aria-hidden="true">#</a> 二、<code>IO</code>流概述</h2><h3 id="_2-1、什么是io流" tabindex="-1"><a class="header-anchor" href="#_2-1、什么是io流" aria-hidden="true">#</a> 2.1、什么是<code>IO</code>流</h3><blockquote><p><code>I/O</code>是<code>Input/Output</code>的缩写，<code>I/O</code>技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</p><p><code>IO流</code>是一组有序的，有起点和终点的数据集合，是对数据传输的总称和抽象。</p><p><code>IO作用</code>：</p><ul><li>人机交互</li><li>文件数据读取写入，数据持久化保存</li></ul><p><code>IO</code>流的源和目的地：</p><ul><li>内存</li><li>控制台</li><li>磁盘文件</li><li>网络端点</li></ul><p>关于<code>Input</code>和<code>Output</code>：</p><ul><li><code>Input</code>读取外部数据(磁盘、光盘等存储设备的数据)到程序(内存)中；</li><li><code>Output</code>将程序(内存)数据输出到磁盘、光盘等存储设备中。</li></ul></blockquote><h3 id="_2-2、io流分类" tabindex="-1"><a class="header-anchor" href="#_2-2、io流分类" aria-hidden="true">#</a> 2.2、<code>IO</code>流分类</h3><blockquote><p><strong>按照处理的数据单元不同</strong>：</p><ul><li><strong>字节流</strong>：操作的数据单元是<strong>8位字节</strong>，<code>InputStream</code>、<code>OutputStream</code>。二进制文件(声音、图片、视频)、文本文件；</li><li><strong>字符流</strong>：操作的数据单元是<strong>16位字符</strong>，<code>Reader</code>、<code>Writer</code>，通常用于处理文本文件。</li></ul><p><strong>按照数据流流向不同</strong>：</p><ul><li><strong>输入流</strong>：只能从中读取数据，而不能向其写入数据。<code>InputStream</code>、<code>Reader</code>；</li><li><strong>输出流</strong>：只能向其写入数据，而不能从中读取数据。<code>OutputStream</code>、<code>Writer</code>；</li><li><strong>输入、输出都是从内存的角度进行划分</strong>，内存--&gt;硬盘，输出流；硬盘--&gt;内存，输入流。</li></ul><table><thead><tr><th></th><th style="text-align:left;"><strong>字节流</strong></th><th><strong>字符流</strong></th></tr></thead><tbody><tr><td><strong>输入流</strong></td><td style="text-align:left;"><code>InputStream</code></td><td><code>Reader</code></td></tr><tr><td><strong>输出流</strong></td><td style="text-align:left;"><code>OutputStream</code></td><td><code>Writer</code></td></tr></tbody></table><p>Java的<code>IO</code>流共涉及40多个类，实际上非常规则，都是从上面4个抽象基类派生的。</p><p>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</p></blockquote><h3 id="_2-3、io流处理流程" tabindex="-1"><a class="header-anchor" href="#_2-3、io流处理流程" aria-hidden="true">#</a> 2.3、<code>IO</code>流处理流程</h3><blockquote><ul><li>打开流</li><li>在流中数据传输(输入/输出 读/写)</li><li><strong>关闭流</strong></li></ul><p>程序中打开的文件<code>IO</code>资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该显式关闭文件<code>IO</code>资源。</p></blockquote><h2 id="三、字节流" tabindex="-1"><a class="header-anchor" href="#三、字节流" aria-hidden="true">#</a> 三、字节流</h2><blockquote><p>操作的数据单元是<strong>8位字节</strong>，主要涉及两个抽象类：<code>InputStream</code>、<code>OutputStream</code>。</p></blockquote><h3 id="_3-1、inputstream" tabindex="-1"><a class="header-anchor" href="#_3-1、inputstream" aria-hidden="true">#</a> 3.1、<code>InputStream</code></h3><blockquote><p>主要方法：</p><ul><li><code>int read()</code>：从输入流中读取数据的下一个字节。返回0到255范围内的int字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 -1；</li><li><code>int read(byte[] b)</code>：从此输入流中将最多<code>b.length</code>个字节的数据读入一个<code>byte</code>数组中。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数；</li><li><code>int read(byte[] b, int off,int len)</code>：将输入流中最多<code>len</code>个数据字节读入<code>byte</code>数组。尝试读取<code>len</code>个字节，但读取的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于文件末尾而没有可用的字节，则返回值 -1；</li><li><code>public void close()</code>：关闭此输入流并释放与该流关联的所有系统资源。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest3</span> <span class="token punctuation">{</span>\n    <span class="token comment">/*\n     * IO流\n     *\n     * 操作步骤：\n     * \t1.打开流\n     *  2.读/写\n     *  3.关闭流\n     * 分类-------&gt;能够解决什么情况下选择什么样的IO流的问题\n     * \t|---处理数据单元的不同\n     * \t\t\t|---字节流(8) InputStream OutputStream\n     * \t\t\t|---字符流 (16) Reader Writer\n     * \t|---流向---方向   物理   参考系---内存\n     * \t\t |---输入流  InputStream Reader\n     * \t\t |---输出流  OutputStream Writer\n     * \t1.InputStream OutputStream Reader Writer都是抽象类，我们学习的是他们的子类;\n     * \t2.任何一个IO流同时属于上面两个分类体系;\n     * \t3.处理的内容是二进制文件(声音，图片，视频)使用字节流进行处理\n     * \t4.处理的内容是文本文件(txt)使用字符流进行处理\n     * */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * 使用字节流读取文件并在控制台打印--InputStream--FileInputStream\n         * */</span>\n        <span class="token comment">//打开流</span>\n        <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/*\n         * 读取文件中的内容\n         * 1.为了提升读取效率，要一次尽可能读取多个字节的数据----读到数组里面\n         * 2.文件有可能特别大，数组如果设置特别大会导致程序崩溃----数组的大小不能特别大，不能和被读取的文件一样大，数组要小一点----多次调用读取的方法进行读取----循环读取\n         * 3.read方法返回-1表示读到文件末尾\n         *\n         * read(byte[] arr)\n         * read(byte[] arr, int off, int len); ***\n         */</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1KB</span>\n        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//内容在数组中----String</span>\n            <span class="token comment">//byte[]----String</span>\n            <span class="token comment">/*\n             * 根据数组中的有效信息转换成字符串\n             * */</span>\n            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//打印转换的内容</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//关闭流</span>\n        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h3 id="_3-2、outputstream" tabindex="-1"><a class="header-anchor" href="#_3-2、outputstream" aria-hidden="true">#</a> 3.2、<code>OutputStream</code></h3><blockquote><p>主要方法：</p><ul><li><code>void write(int b)</code>：将指定的字节写入此输出流。write的常规协定是：向输出流写入一个字节。要写入的字节是参数b的八个低位。b 的24个高位将被忽略，即写入0~255范围的；</li><li><code>void write(byte[] b)</code>：将<code>b.length</code>个字节从指定的<code>byte</code>数组写入此输出流。<code>write(b)</code>的常规协定是：应该与调用<code>write(b, 0, b.length)</code>的效果完全相同；</li><li><code>void write(byte[] b,int off,int len)</code>：将指定<code>byte</code>数组中从偏移量<code>off</code>开始的<code>len</code>个字节写入此输出流；</li><li><code>void flush()</code>：刷新此输出流并强制写出所有缓冲的输出字节，调用此方法指示应将这些字节立即写入它们预期的目标；</li><li><code>void close()</code>：关闭此输出流并释放与该流关联的所有系统资源。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest4</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * 从控制台获取输入，将输入的内容写入到文件当中（使用字节流）\n         * OutputStream\n         * */</span>\n        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/*\n         * 日志文件\n         *\n         * */</span>\n        <span class="token comment">//打开流</span>\n        <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//读取键盘数据</span>\n        <span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        str <span class="token operator">+=</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">//String---&gt;byte[]</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//写入数据</span>\n        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//关闭流</span>\n        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><blockquote><p>在写入一个文件时，如果使用构造器<code>FileOutputStream(file)</code>，则目录下有同名文件将被覆盖。</p><p>如果使用构造器<code>FileOutputStream(file,true)</code>，则目录下的同名文件不会被覆盖，在文件内容末尾追加内容。</p></blockquote><h3 id="_3-3、字节流实现文件拷贝" tabindex="-1"><a class="header-anchor" href="#_3-3、字节流实现文件拷贝" aria-hidden="true">#</a> 3.3、字节流实现文件拷贝</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest5</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//拷贝操作---复制---读取一个文件的内容，写入另外的一个文件</span>\n        <span class="token comment">//打开流</span>\n        <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\pic.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\pic1.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token comment">//读写操作</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//读取多少内容，就写入多少内容</span>\n            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//关闭</span>\n        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="四、字符流" tabindex="-1"><a class="header-anchor" href="#四、字符流" aria-hidden="true">#</a> 四、字符流</h2><blockquote><p>操作的数据单元是<strong>16位字符</strong>，主要涉及两个抽象类：<code>Reader</code>、<code>Writer</code>，通常用于处理文本文件。</p></blockquote><h3 id="_4-1、reader" tabindex="-1"><a class="header-anchor" href="#_4-1、reader" aria-hidden="true">#</a> 4.1、<code>Reader</code></h3><blockquote><p>主要方法：</p><ul><li><code>int read()</code>：读取单个字符。作为整数读取的字符，范围在0到65535之间 (2个字节的Unicode码），如果已到达流的末尾，则返回 -1；</li><li><code>int read(char[] cbuf)</code>：将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数；</li><li><code>int read(char[] cbuf,int off,int len)</code>：将字符读入数组的某一部分，存到数组<code>cbuf</code>中，从<code>off</code>处开始存储，最多读<code>len</code>个字符。如果已到达流的末尾，则返回 -1，否则返回本次读取的字符数；</li><li><code>close()</code>：关闭此输入流并释放与该流关联的所有系统资源。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest6</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * 字符流(16)---Reader Writer\n         * */</span>\n        <span class="token comment">//打开流</span>\n        <span class="token class-name">FileReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token comment">//读取</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//打印String</span>\n            <span class="token comment">//char[]----&gt;String</span>\n            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//关闭</span>\n        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_4-2、writer" tabindex="-1"><a class="header-anchor" href="#_4-2、writer" aria-hidden="true">#</a> 4.2、<code>Writer</code></h3><blockquote><p>主要方法：</p><ul><li><code>void write(int c)</code>：写入单个字符。要写入的字符包含在给定整数值的16个低位中，16高位被忽略。 即写入0到65535之间的Unicode码；</li><li><code>void write(char[] cbuf)</code>：写入字符数组；</li><li><code>void write(char[] cbuf,int off,int len)</code>：写入字符数组的某一部分。从<code>off</code>开始，写入<code>len</code>个字符；</li><li><code>void write(String str)</code>：写入字符串；</li><li><code>void write(String str,int off,int len)</code>：写入字符串的某一部分；</li><li><code>void flush()</code>：刷新该流的缓冲，则立即将它们写入预期目标；</li><li><code>void close()</code>：关闭此输出流并释放与该流关联的所有系统资源。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest7</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//在文件中写入数据---Writer</span>\n        <span class="token class-name">FileWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//写入</span>\n        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abcdefg....&quot;</span><span class="token punctuation">;</span>\n        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//关闭</span>\n        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>在写入一个文件时，如果使用构造器<code>FileWriter(file)</code>，则目录下有同名文件将被覆盖。</p><p>如果使用构造器<code>FileWriter(file,true)</code>，则目录下的同名文件不会被覆盖，在文件内容末尾追加内容。</p></blockquote><h3 id="_4-3、字符流实现文件拷贝" tabindex="-1"><a class="header-anchor" href="#_4-3、字符流实现文件拷贝" aria-hidden="true">#</a> 4.3、字符流实现文件拷贝</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest8</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//使用字符流进行文件的拷贝</span>\n        <span class="token comment">//打开流</span>\n        <span class="token class-name">FileReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">FileWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token comment">//读写</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//关闭</span>\n        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="五、缓冲流" tabindex="-1"><a class="header-anchor" href="#五、缓冲流" aria-hidden="true">#</a> 五、缓冲流</h2><blockquote><p>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组，默认使用<strong>8192</strong>个字节或字符的缓冲区。缓冲流要<strong>套接</strong>在相应的节点流之上。</p><p>根据数据操作单位可以把缓冲流分为：</p><ul><li><code>BufferedInputStream</code>和<code>BufferedOutputStream</code>；</li><li><code>BufferedReader</code>和<code>BufferedWriter</code>。</li></ul><p>当使用<code>BufferedInputStream</code>读取字节文件时，<code>BufferedInputStream</code>会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中读取下一个8192个字节数组。</p><p>向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，<code>BufferedOutputStream</code>才会把缓冲区中的数据一次性写到文件里。使用方法<code>flush()</code>可以强制将缓冲区的内容全部写入输出流。</p><p><strong>关闭流的顺序和打开流的顺序相反</strong>。<strong>只要关闭最外层流即可</strong>，关闭最外层流也会相应关闭内层节点流。</p><p>如果是带缓冲区的流对象的<code>close()</code>方法，不但会关闭流，还会在关闭流之前刷新缓冲区，关闭后不能再写出。</p></blockquote><h3 id="_5-1、使用缓冲流实现文件拷贝" tabindex="-1"><a class="header-anchor" href="#_5-1、使用缓冲流实现文件拷贝" aria-hidden="true">#</a> 5.1、使用缓冲流实现文件拷贝</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest9</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">BufferedReader</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">BufferedWriter</span> wr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            wr<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        wr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        rd<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_5-2、按行读取" tabindex="-1"><a class="header-anchor" href="#_5-2、按行读取" aria-hidden="true">#</a> 5.2、按行读取</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest10</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//字符过滤流---缓冲区---BufferdReader</span>\n        <span class="token comment">//打开流</span>\n        <span class="token class-name">FileReader</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Maxwell\\\\Desktop\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/*\n         * Reader in = rd;向上转型 多态\n         * BufferedReader in = new BufferedReader(in);\n         * */</span>\n        <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>rd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//读---控制台</span>\n        <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//关闭</span>\n        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',42),e={},t=(0,a(83744).Z)(e,[["render",function(n,s){return p}]])}}]);