"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[2657],{40329:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6b357922",path:"/javase/basic/02_Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、关键字",slug:"一、关键字",children:[{level:3,title:"1.1、是什么",slug:"_1-1、是什么",children:[]},{level:3,title:"1.2、保留字",slug:"_1-2、保留字",children:[]}]},{level:2,title:"二、标识符",slug:"二、标识符",children:[{level:3,title:"2.1、是什么",slug:"_2-1、是什么",children:[]},{level:3,title:"2.2、定义规则（重点）",slug:"_2-2、定义规则-重点",children:[]},{level:3,title:"2.3、Java命名规范（重点）",slug:"_2-3、java命名规范-重点",children:[]}]},{level:2,title:"三、注释",slug:"三、注释",children:[{level:3,title:"3.1、是什么",slug:"_3-1、是什么",children:[]},{level:3,title:"3.2、作用",slug:"_3-2、作用",children:[]},{level:3,title:"3.3、分类",slug:"_3-3、分类",children:[]}]},{level:2,title:"四、变量",slug:"四、变量",children:[{level:3,title:"4.0、计算机进制转换",slug:"_4-0、计算机进制转换",children:[]},{level:3,title:"4.1、什么是变量",slug:"_4-1、什么是变量",children:[]},{level:3,title:"4.2、变量的定义和分类",slug:"_4-2、变量的定义和分类",children:[]},{level:3,title:"4.3、基本数据类型",slug:"_4-3、基本数据类型",children:[]}]},{level:2,title:"五、运算符",slug:"五、运算符",children:[{level:3,title:"5.1、算数运算符",slug:"_5-1、算数运算符",children:[]},{level:3,title:"5.2、赋值运算符",slug:"_5-2、赋值运算符",children:[]},{level:3,title:"5.3、关系运算符",slug:"_5-3、关系运算符",children:[]},{level:3,title:"5.4、逻辑运算符",slug:"_5-4、逻辑运算符",children:[]},{level:3,title:"5.5、三元运算符",slug:"_5-5、三元运算符",children:[]},{level:3,title:"5.6、运算符优先级",slug:"_5-6、运算符优先级",children:[]}]}],filePathRelative:"javase/basic/02_Java语言基础.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},31644:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var p=a(66252);const e=a.p+"assets/img/01_关键字.c8046a6e.jpg",t=a.p+"assets/img/02_关键字.dd857af8.jpg",o=a.p+"assets/img/十进制转二进制.ffe734cf.jpg",c=a.p+"assets/img/二进制转十进制.fe22204b.jpg",l=a.p+"assets/img/整数相关.04f22c1b.jpg",u=a.p+"assets/img/浮点数.f8e3d5bc.jpg",i=a.p+"assets/img/自动类型转换.3720b487.jpg",r=a.p+"assets/img/算数运算符.63f12d01.jpg",k=a.p+"assets/img/关系运算.4d1e78c4.jpg",b=a.p+"assets/img/运算符的优先级.289ecaa4.jpg",d=(0,p.uE)('<h2 id="一、关键字" tabindex="-1"><a class="header-anchor" href="#一、关键字" aria-hidden="true">#</a> 一、关键字</h2><h3 id="_1-1、是什么" tabindex="-1"><a class="header-anchor" href="#_1-1、是什么" aria-hidden="true">#</a> 1.1、是什么</h3><blockquote><p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）</p><p>特点：关键字中所有的字母都是小写</p><p>常见关键字如下面两个表格所示。</p></blockquote><p><img src="'+e+'" alt=""></p><p><img src="'+t+'" alt=""></p><blockquote><p>注意：以上关键字了解就可以，不需要刻意去记忆，后续大部分都会学到。</p></blockquote><h3 id="_1-2、保留字" tabindex="-1"><a class="header-anchor" href="#_1-2、保留字" aria-hidden="true">#</a> 1.2、保留字</h3><blockquote><p>定义：现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字。</p><p>Java中的保留字：</p><ul><li>cast</li><li>future</li><li>generic</li><li>inner</li><li>operator</li><li>outer</li><li>rest</li><li><strong>goto</strong></li><li>const</li></ul><p>问题：在Java中能否使用goto为变量命名。</p></blockquote><h2 id="二、标识符" tabindex="-1"><a class="header-anchor" href="#二、标识符" aria-hidden="true">#</a> 二、标识符</h2><h3 id="_2-1、是什么" tabindex="-1"><a class="header-anchor" href="#_2-1、是什么" aria-hidden="true">#</a> 2.1、是什么</h3><blockquote><p>定义：Java对各种变量、方法和类等要素<strong>命名</strong>时使用的字符序列。</p><p>凡是自己可以起名字的地方都叫标识符。</p></blockquote><h3 id="_2-2、定义规则-重点" tabindex="-1"><a class="header-anchor" href="#_2-2、定义规则-重点" aria-hidden="true">#</a> 2.2、定义规则（重点）</h3><blockquote><ul><li>由26个英文字母大小写，0-9 ，_或 $组成（字母、数字、 _，$）</li><li>数字不可以开头</li><li><strong>不可以使用关键字和保留字，但能包含关键字和保留字</strong></li><li>Java中严格区分大小写，长度无限制</li><li>标识符不能包含空格</li></ul><p>例：判断标识符是否合法<code>$1、abc、new、car.01、1test、test1</code></p></blockquote><h3 id="_2-3、java命名规范-重点" tabindex="-1"><a class="header-anchor" href="#_2-3、java命名规范-重点" aria-hidden="true">#</a> 2.3、Java命名规范（重点）</h3><blockquote><p><strong>包名</strong>：多单词组成时所有字母都小写：<code>xxxyyyzzz</code></p><p><strong>类名、接口名</strong>：多单词组成时，所有单词的首字母大写：<code>XxxYyyZzz</code></p><p><strong>变量名、方法名</strong>：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：<code>xxxYyyZzz</code></p><p><strong>常量名</strong>：所有字母都大写。多单词时每个单词用下划线连接：<code>XXX_YYY_ZZZ</code></p><p>总原则：见名知意</p></blockquote><h2 id="三、注释" tabindex="-1"><a class="header-anchor" href="#三、注释" aria-hidden="true">#</a> 三、注释</h2><h3 id="_3-1、是什么" tabindex="-1"><a class="header-anchor" href="#_3-1、是什么" aria-hidden="true">#</a> 3.1、是什么</h3><blockquote><p>注释就是<strong>对代码的解释和说明</strong>，其目的是让人们能够更加轻松地了解代码。</p><p>注释是编写程序时，写程序的人给一个语句、程序段、函数等的解释或提示，能<strong>提高程序代码的可读性</strong>。</p><p>注释只是为了提高可读性，<strong>不会被计算机编译</strong>。</p><p>注释是一个程序员必须要具有的良好编程习惯。初学者编写程序应该养成习惯，先写注释再写代码。</p></blockquote><h3 id="_3-2、作用" tabindex="-1"><a class="header-anchor" href="#_3-2、作用" aria-hidden="true">#</a> 3.2、作用</h3><blockquote><ul><li>对代码解释和说明；</li><li>阻止代码运行。</li></ul></blockquote><h3 id="_3-3、分类" tabindex="-1"><a class="header-anchor" href="#_3-3、分类" aria-hidden="true">#</a> 3.3、分类</h3><blockquote><p><strong>单行注释</strong>：<code>//注释文字</code></p><p><strong>多行注释</strong>：<code>/* 注释文字 */</code></p><p>文档注释：用来生成文档（了解）</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n* 这是一个文档注释\n* <span class="token keyword">@version</span> 1.0\n* <span class="token keyword">@since</span> 1.8\n*/</span>\n<span class="token comment">/*\n\t这里定义了一个类\n*/</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//这是main方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//在控制台输出内容</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过注释阻止下面这段代码的运行</span>\n        <span class="token comment">//System.out.println(&quot;Hello Java&quot;);</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>生成文档命令如下：</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>javadoc -d MyTest -encoding UTF-8 MyTest.java\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="四、变量" tabindex="-1"><a class="header-anchor" href="#四、变量" aria-hidden="true">#</a> 四、变量</h2><h3 id="_4-0、计算机进制转换" tabindex="-1"><a class="header-anchor" href="#_4-0、计算机进制转换" aria-hidden="true">#</a> 4.0、计算机进制转换</h3><h4 id="_4-0-1、什么是进制" tabindex="-1"><a class="header-anchor" href="#_4-0-1、什么是进制" aria-hidden="true">#</a> 4.0.1、什么是进制</h4><blockquote><p>在生活中，我们通常都是使用<strong>阿拉伯数字</strong>计数的，也就是10进制，以10为单位，逢10进一，数字由<code>0，1，2、3、4、5、6、7、8、9</code>组成；而在计算机中，计算机是无法识别10进制数的，它只能识别<code>0、1</code>代码，也就是<strong>二进制</strong>，由0、1两位数字组成，逢二进一。</p><p>那么什么是进制呢，进制就是<strong>进位制</strong>，是人们规定的一种数字进位方法；对于任何一种进制（X进制），都<strong>表示某一位置上的数运算时是逢X进一位</strong>，如：二进制就是逢二进一，八进制就是逢八进一， 十进制是逢十进一，十六进制是逢十六进一，以此类推。</p></blockquote><h4 id="_4-0-2、常见进制简介" tabindex="-1"><a class="header-anchor" href="#_4-0-2、常见进制简介" aria-hidden="true">#</a> 4.0.2、常见进制简介</h4><blockquote><p>**二进制：**由<code>0，1</code>组成，运算规律是<code>逢二进一</code>，计算机只能识别二进制表示的数据；</p><p>**八进制：**由<code>0、1、2、3、4、5、6、7</code>组成，运算规律是<code>逢八进一</code>；</p><p>**十进制：**由<code>0，1，2、3、4、5、6、7、8、9</code>组成，运算规律是<code>逢十进一</code>；</p><p>**十六进制：**由数字<code>0～9</code>以及字母<code>A、B、C、D、E、F</code>组成，运算规律是<code>逢十六进一</code>；</p></blockquote><h4 id="_4-0-3、进制转换" tabindex="-1"><a class="header-anchor" href="#_4-0-3、进制转换" aria-hidden="true">#</a> 4.0.3、进制转换</h4><blockquote><p>以十进制数13为例，实现各进制数的转换：</p></blockquote><h5 id="_4-0-3-1、十进制和二进制之间相互转换" tabindex="-1"><a class="header-anchor" href="#_4-0-3-1、十进制和二进制之间相互转换" aria-hidden="true">#</a> 4.0.3.1、十进制和二进制之间相互转换</h5><p><strong>十进制 &gt;&gt;&gt; 二进制</strong></p><blockquote><p>对于整数部分，用被除数反复除以2，除第一次外，每次除以2均取前一次商的整数部分作被除数并依次记下每次的余数。</p><p>另外，所得到的商的最后一位余数是所求二进制数的最高位。</p></blockquote><p><img src="'+o+'" alt=""></p><p><strong>二进制 &gt;&gt;&gt; 十进制</strong></p><blockquote><p>进制数第1位的权值是2的0次方，第2位的权值是2的1次方，第2位的权值是2的2次方，依次计算，公式：第N位 * 2的N-1次方，结果再相加便是最后结果。</p></blockquote><p><img src="'+c+'" alt=""></p><h5 id="_4-0-3-2、十进制和八进制之间转换" tabindex="-1"><a class="header-anchor" href="#_4-0-3-2、十进制和八进制之间转换" aria-hidden="true">#</a> 4.0.3.2、十进制和八进制之间转换</h5><p><strong>十进制 &gt;&gt;&gt; 八进制</strong></p><blockquote><p>10进制数转换成8进制的方法，和转换为2进制的方法类似，唯一变化：将图中的基数由2变成8，然后依次计算。</p></blockquote><p><strong>八进制 &gt;&gt;&gt; 十进制</strong></p><blockquote><p>可参考图中二进制的计算过程: 进制数第1位的权值为8的0次方，第2位权值为8的1次方，第3位权值为8的2次方，依次计算，公式：第N位 * 8的N-1次方，结果再相加便是最后结果。</p></blockquote><h5 id="_4-0-3-3、十进制和十六进制之间转换" tabindex="-1"><a class="header-anchor" href="#_4-0-3-3、十进制和十六进制之间转换" aria-hidden="true">#</a> 4.0.3.3、十进制和十六进制之间转换</h5><p><strong>十进制 &gt;&gt;&gt; 十六进制</strong></p><blockquote><p>10进制数转换成16进制的方法，和转换为2进制的方法类似，唯一变化：将图中的基数由2变成16，然后依次计算。</p></blockquote><p><strong>十六进制 &gt;&gt;&gt; 十进制</strong></p><blockquote><p>第0位的权值为16的0次方，第1位的权值为16的1次方，第2位的权值为16的2次方，依次计算，公式：第N位 * 16的N-1次方，结果再相加便是最后结果。</p></blockquote><h5 id="_4-0-3-4、其他转换" tabindex="-1"><a class="header-anchor" href="#_4-0-3-4、其他转换" aria-hidden="true">#</a> 4.0.3.4、其他转换</h5><blockquote><ul><li>二进制和八进制之间转换：可先转换为十进制再转换为二进制或者八进制；</li><li>二进制和十六进制之间转换：可先转换为十进制再转换为二进制或者十六进制；</li><li>八进制和十六进制之间转换：可先转换为十进制再转换为十六进制或者八进制。</li></ul></blockquote><h4 id="_4-0-4、二进制数字存储单位" tabindex="-1"><a class="header-anchor" href="#_4-0-4、二进制数字存储单位" aria-hidden="true">#</a> 4.0.4、二进制数字存储单位</h4><blockquote><p>在计算机的二进制数系统中，位简记为<code>bit</code>，也称为<code>比特</code>，是<strong>数据存储的最小单位</strong>，每个二进制数字<code>0</code>或<code>1</code>就是一个位(bit)，也就是一比特。</p><p><code>8bit = 1B</code>，也就是一个字节(Byte)，然而<code>1KB</code>却不等于<code>1000B</code>，下面是详细的计算规则：</p><p>1B（byte，字节）= 8 bit；</p><p>1KB（Kibibyte，千字节）= 1024B = 2^10 B；</p><p>1MB（Mebibyte，兆字节，百万字节，简称“兆”）= 1024KB = 2^20 B；</p><p>1GB（Gigabyte，吉字节，十亿字节，又称“千兆”）= 1024MB = 2^30 B；</p><p>1TB（Terabyte，万亿字节，太字节）= 1024GB = 2^40 B；</p><p>1PB（Petabyte，千万亿字节，拍字节）= 1024TB = 2^50 B；</p><p>以上这些是二进制数的存储单位计算规则，而在硬盘容量也能看到类似的单位，但是硬盘的容量通常是以十进制标识的，所以显示有500G容量的硬盘实际容量却不足500G。</p></blockquote><h3 id="_4-1、什么是变量" tabindex="-1"><a class="header-anchor" href="#_4-1、什么是变量" aria-hidden="true">#</a> 4.1、什么是变量</h3><blockquote><p>定义：在程序执行的过程中，在某个范围内其值可以发生改变的量。</p><p>本质：<strong>是内存中的一个存储区域，是存储数据的单元</strong>，该区域有自己的名称（变量名）和类型（数据类型）， Java中每个变量必须<strong>先声明，后使用</strong>，该区域的数据可以在同一类型范围内不断变化。</p><ul><li>整个内存就好像是酒店，当中包含了多个<strong>房间</strong>；</li><li>房间的**容量（大小）**不同（单人间、两人间...）；</li><li>每个房间都有一个唯一的<strong>门牌号</strong>；</li><li>每个房间的<strong>住客</strong>也不同。</li></ul><p>酒店的房间 -- 变量</p><ul><li>房间的类型 -- 数据类型</li><li>房间的门牌号 -- 变量名</li><li>房间的住客 -- 值</li></ul></blockquote><h3 id="_4-2、变量的定义和分类" tabindex="-1"><a class="header-anchor" href="#_4-2、变量的定义和分类" aria-hidden="true">#</a> 4.2、变量的定义和分类</h3><blockquote><p>格式：<code>数据类型 变量名 = 初始值;</code></p><p>按照数据类型分类（掌握）：</p><ul><li>基本数据类型 <ul><li><code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li><code>float</code>、<code>double</code></li><li><code>char</code></li><li><code>boolean</code></li></ul></li><li>引用数据类型 <ul><li>类<code>class</code></li><li>接口<code>interface</code></li><li>数组</li></ul></li></ul><p>按照声明的位置不同分类（了解）：</p><ul><li>成员变量（在方法体外，类体内声明的变量称为成员变量） <ul><li>实例变量（不被static修饰）</li><li>类变量（被static修饰）</li></ul></li><li>局部变量（在方法体内部声明的变量称为局部变量） <ul><li>形参（方法参数列表中定义的变量）</li><li>方法局部变量（在方法内定义）</li><li>代码块局部变量（在代码块内定义）</li></ul></li></ul></blockquote><h3 id="_4-3、基本数据类型" tabindex="-1"><a class="header-anchor" href="#_4-3、基本数据类型" aria-hidden="true">#</a> 4.3、基本数据类型</h3><h4 id="_4-3-1、整数类型" tabindex="-1"><a class="header-anchor" href="#_4-3-1、整数类型" aria-hidden="true">#</a> 4.3.1、整数类型</h4><blockquote><p>Java各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证Java程序的可移植性。</p><p>Java的整型常量默认为<code>int</code>型，声明<code>long</code>型常量须后加<code>l</code>或<code>L</code>。</p></blockquote><p><img src="'+l+'" alt=""></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//定义一个int类型变量</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token comment">//输出这个变量</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//定义一个long类型变量, long类型后面通常添加L或l，建议大家使用L</span>\n        <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token number">10L</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_4-3-2、浮点类型" tabindex="-1"><a class="header-anchor" href="#_4-3-2、浮点类型" aria-hidden="true">#</a> 4.3.2、浮点类型</h4><blockquote><p>与整数类型类似，Java浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响</p><p>Java的浮点型常量默认为<code>double</code>型，声明<code>float</code>型常量，须后加<code>f</code>或<code>F</code>。</p><p>浮点型常量有两种表示形式：</p><ul><li>十进制数形式，如：<code>5.12、512.0f、.512 （必须有小数点）</code>；</li><li>科学计数法形式，如：<code>5.12e2、512E2、100E-2</code>。</li></ul></blockquote><p><img src="'+u+'" alt=""></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//定义一个double类型的变量</span>\n        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">10.5</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//定义一份float类型的变量，末尾一定要加F或f</span>\n        <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">10.5F</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//使用科学计数法定义浮点类型数据</span>\n        <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">10e-2</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">float</span> d <span class="token operator">=</span> <span class="token number">10e-2F</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_4-3-3、字符类型" tabindex="-1"><a class="header-anchor" href="#_4-3-3、字符类型" aria-hidden="true">#</a> 4.3.3、字符类型</h4><blockquote><p><code>char</code>型数据用来表示通常意义上字符(2字节)</p><p>字符型常量的三种表现形式：</p><ul><li>字符常量是用单引号括起来的单个字符，涵盖世界上所有书面语的字符。例如： <ul><li><code>char c1 = &#39;a&#39;;</code></li><li><code>char c2 = &#39;中&#39;;</code></li><li><code>char c3 = &#39;9&#39;;</code></li></ul></li><li>使用转义字符<code>\\</code>来将其后的字符转变为特殊字符型常量。 <ul><li><code>char c4 = &#39;\\n&#39;; //&#39;\\n&#39;表示换行符 </code></li></ul></li><li>直接使用Unicode值来表示字符型常量：<code>\\uXXXX</code>。其中，<code>XXXX</code>代表一个<strong>十六进制整数</strong>。例如： <ul><li><code>char c5 = &#39;\\u0041&#39;; //表示A</code></li></ul></li></ul><p>注意：<code>char</code>类型是可以进行运算的。因为它都对应有Unicode码。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest3</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//定义一个char型变量</span>\n        <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//使用转移符号定义char型变量</span>\n        <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//使用Unicode值定义char型变量</span>\n        <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;\\u0045&#39;</span><span class="token punctuation">;</span> <span class="token comment">//E</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//char类型参与算数运算</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_4-3-4、布尔类型" tabindex="-1"><a class="header-anchor" href="#_4-3-4、布尔类型" aria-hidden="true">#</a> 4.3.4、布尔类型</h4><blockquote><p><code>boolean</code>类型适于逻辑运算，一般用于程序流程控制，<code>if</code>条件控制语句、<code>while</code>循环控制语句、<code>do-while</code>循环控制语句、<code>for</code>循环控制语句；</p><p><code>boolean</code>类型数据只允许取值<code>true</code>和<code>false</code>，不可以0或非0的整数替代<code>false</code>和<code>true</code>，这点和C语言不同。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest4</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//定义boolean类型变量</span>\n        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_4-3-5、基本数据类型转换" tabindex="-1"><a class="header-anchor" href="#_4-3-5、基本数据类型转换" aria-hidden="true">#</a> 4.3.5、基本数据类型转换</h4><h5 id="_4-3-5-1、自动类型转换" tabindex="-1"><a class="header-anchor" href="#_4-3-5-1、自动类型转换" aria-hidden="true">#</a> 4.3.5.1、自动类型转换</h5><blockquote><p>定义：容量小的类型自动转换为容量大的数据类型称为自动类型转换。</p><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</p></blockquote><p><img src="'+i+'" alt=""></p><blockquote><p><code>byte、short、char</code>之间不会相互转换，他们三者在计算时首先转换为<code>int</code>类型。</p><p>当把任何基本类型的值和字符串值进行连接运算时(+)，基本类型的值将自动转化为字符串类型（基本数据类型转换成字符串）。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest5</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>\n        <span class="token comment">//自动类型转换，char转换成int类型</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> ch<span class="token punctuation">;</span>\n\n        <span class="token keyword">byte</span> bt <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>\n        <span class="token comment">//自动类型转换，byte型转成short型</span>\n        <span class="token keyword">short</span> st <span class="token operator">=</span> bt<span class="token punctuation">;</span>\n        <span class="token comment">//byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> ch <span class="token operator">+</span> bt<span class="token punctuation">;</span><span class="token comment">//正确</span>\n        <span class="token comment">//short st1 = ch + bt; //错误</span>\n        <span class="token comment">//short st2 = st * 2; // 错误</span>\n\n        <span class="token comment">//基本数据类型数据和字符串进行&quot;+&quot;运算，会将基本数据类型转换成字符串类型，完成字符串拼接</span>\n        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> bt<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h5 id="_4-3-5-2、强制类型转换" tabindex="-1"><a class="header-anchor" href="#_4-3-5-2、强制类型转换" aria-hidden="true">#</a> 4.3.5.2、强制类型转换</h5><blockquote><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符<code>()</code>，但可能造成精度降低或溢出，格外要注意。</p><p>通常，字符串不能直接转换为基本数据类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型（常用类那一章再讲）</p><p><code>boolean</code>类型不可以转换为其它的数据类型</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest6</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n        <span class="token comment">//强制类型转换</span>\n        <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>\n\n        <span class="token comment">//String转换为基本数据类型，使用对应的包装类，后面会讲到</span>\n        <span class="token class-name">String</span> numStr <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>numStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="五、运算符" tabindex="-1"><a class="header-anchor" href="#五、运算符" aria-hidden="true">#</a> 五、运算符</h2><h3 id="_5-1、算数运算符" tabindex="-1"><a class="header-anchor" href="#_5-1、算数运算符" aria-hidden="true">#</a> 5.1、算数运算符</h3><p><img src="'+r+'" alt=""></p><blockquote><p>如果对负数取模，可以把模数负号忽略不记，如：<code>5%-2=1</code>。 但被模数是负数则不可忽略。</p><p>对于除号<code>/</code>，它的整数除和小数除是有区别的：<code>整数之间做除法时，只保留整数部分而舍弃小数部分</code>。</p><p><code>+</code>除字符串相加功能外，还能把非字符串转换成字符串。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest7</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//取余 求模 % 前面的是被模数 后面的是模数</span>\n        <span class="token comment">//除法 / 前面的是被除数 后面的是除数</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//如果对负数取模，可以把模数负号忽略不记</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//整数之间做除法时，只保留整数部分而舍弃小数部分</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3.0</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//++在变量的基础上加1 前面：先加1，再赋值  后面：先赋值，再加1</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> t1 <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">/*\n\t\t    ++i;\n\t\t    System.out.println(i);\n\t\t*/</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><blockquote><p>写出下面这段程序输出的内容</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest8</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> i1<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i = &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i1 = &quot;</span> <span class="token operator">+</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        i <span class="token operator">=</span> <span class="token operator">++</span>i1<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i = &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i1 = &quot;</span> <span class="token operator">+</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        i <span class="token operator">=</span> i2<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i = &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i2 = &quot;</span> <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        i <span class="token operator">=</span> <span class="token operator">--</span>i2<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i = &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i2 = &quot;</span> <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>输出如下：</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>i = 10\ni1 = 11\ni = 12\ni1 = 12\ni = 20\ni2 = 19\ni = 18\ni2 = 18\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>交换两个变量的值</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//交换两个变量的值</span>\na <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\nb <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>\na <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_5-2、赋值运算符" tabindex="-1"><a class="header-anchor" href="#_5-2、赋值运算符" aria-hidden="true">#</a> 5.2、赋值运算符</h3><blockquote><p><strong>赋</strong>：赋予、给</p><p>符号<code>=</code>，不是我们通常说的等于，在Java中它的意思是把右侧的值<code>给</code>左侧</p><p>当<code>=</code>两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理</p><p>支持连续赋值：<code>x = y = 1</code></p><p>扩展赋值运算符：<code>+=、-=、*=、/=、%=</code></p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest9</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//赋值运算</span>\n        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> y<span class="token punctuation">;</span>\n        <span class="token comment">//连续赋值</span>\n        x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token comment">//扩展赋值运算</span>\n        x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//x = x + 2;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>交换两个变量的值</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>\na <span class="token operator">=</span> b<span class="token punctuation">;</span>\nb <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_5-3、关系运算符" tabindex="-1"><a class="header-anchor" href="#_5-3、关系运算符" aria-hidden="true">#</a> 5.3、关系运算符</h3><p><img src="'+k+'" alt=""></p><blockquote><p>关系运算符的结果都是<code>boolean</code>型，也就是要么是<code>true</code>，要么是<code>false</code>。</p><p>关系运算符<code>==</code>不能误写成<code>=</code>。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest10</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//关系运算</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_5-4、逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_5-4、逻辑运算符" aria-hidden="true">#</a> 5.4、逻辑运算符</h3><blockquote><p><strong>与（<code>&amp;</code>或<code>&amp;&amp;</code>）</strong>：两侧为真，则为真；一侧为假，则为假。</p><p><strong>或（<code>|</code>或<code>||</code>）</strong>：两侧为假，则为假；一侧为真，则为真。</p><p><strong>非（<code>!</code>）</strong>：取反，真的变成假，假的变成真。</p><p><strong>异或（<code>^</code>）</strong>：强调的是异，两侧相同则为假，两侧不同则为真，体现的是一个<strong>异</strong>。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest11</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//逻辑运算 &amp;逻辑与 两个都为真（true），则为真，一侧为假，则为假（false）</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//|逻辑或 一侧为真，则为真，两侧为假，则为假</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//!逻辑非 取反</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// ^异或 两边相同返回假，两边不同返回真</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">^</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">^</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p><code>&amp;</code>和<code>&amp;&amp;</code>区别：</p><ul><li><code>&amp;</code>左边无论真假，右边都进行运算</li><li><code>&amp;&amp;</code>如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算</li></ul><p><code>|</code>和<code>||</code>区别：</p><ul><li><code>|</code>左边无论真假，右边都进行运算</li><li><code>||</code>如果左边为假，右边参与运算，如果左边为真，那么右边不参与运算</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest12</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//&amp;&amp;短路与 两个都为真（true），则为真，一侧为假，则为假（false），左侧为假，右侧不进行运算</span>\n        <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> y1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1 <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">++</span>y1 <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//||短路或 一侧为真，则为真，两侧为假，则为假，左侧为真，右侧不进行运算</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1 <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>y1 <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_5-5、三元运算符" tabindex="-1"><a class="header-anchor" href="#_5-5、三元运算符" aria-hidden="true">#</a> 5.5、三元运算符</h3><blockquote><p>语法：<code>(条件表达式)? 表达式1：表达式2</code></p><p>条件表达式为true，运算后的结果是表达式1</p><p>条件表达式为false，运算后的结果是表达式2</p><p>表达式1和表达式2为同种类型</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest13</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//三元运算符，判断最大值</span>\n        <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">&gt;=</span> x2<span class="token punctuation">)</span> <span class="token operator">?</span> x1 <span class="token operator">:</span> x2<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_5-6、运算符优先级" tabindex="-1"><a class="header-anchor" href="#_5-6、运算符优先级" aria-hidden="true">#</a> 5.6、运算符优先级</h3><p><img src="'+b+'" alt=""></p><blockquote><p>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序，先算谁，再算谁。</p><p>如上表，上一行运算符总优先于下一行。</p><p>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</p><p><strong>顺序记不住没有关系，先算乘除，后算加减，有括号先算括号里面的，在代码中通过括号限定运算顺序</strong></p></blockquote>',113),m={},h=(0,a(83744).Z)(m,[["render",function(n,s){return d}]])}}]);