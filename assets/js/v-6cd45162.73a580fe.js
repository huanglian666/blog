"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[8260],{77163:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6cd45162",path:"/javase/basic/06_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、类和对象",slug:"一、类和对象",children:[{level:3,title:"1.1、什么对象",slug:"_1-1、什么对象",children:[]},{level:3,title:"1.2、什么是类",slug:"_1-2、什么是类",children:[]},{level:3,title:"1.3、类和对象的关系",slug:"_1-3、类和对象的关系",children:[]},{level:3,title:"1.4、为什么设计类",slug:"_1-4、为什么设计类",children:[]}]},{level:2,title:"二、类的组成与创建对象",slug:"二、类的组成与创建对象",children:[{level:3,title:"2.1、属性",slug:"_2-1、属性",children:[]},{level:3,title:"2.2、方法",slug:"_2-2、方法",children:[]},{level:3,title:"2.3、对象的创建和使用",slug:"_2-3、对象的创建和使用",children:[]},{level:3,title:"2.4、类的访问机制",slug:"_2-4、类的访问机制",children:[]},{level:3,title:"2.5、成员变量和局部变量",slug:"_2-5、成员变量和局部变量",children:[]}]},{level:2,title:"三、方法重载",slug:"三、方法重载",children:[]},{level:2,title:"四、构造方法",slug:"四、构造方法",children:[{level:3,title:"4.1、是什么",slug:"_4-1、是什么",children:[]},{level:3,title:"4.2、作用和特点",slug:"_4-2、作用和特点",children:[]},{level:3,title:"4.3、构造方法相关细节",slug:"_4-3、构造方法相关细节",children:[]}]},{level:2,title:"五、this关键字",slug:"五、this关键字",children:[{level:3,title:"5.1、表示当前对象",slug:"_5-1、表示当前对象",children:[]},{level:3,title:"5.2、表示构造方法",slug:"_5-2、表示构造方法",children:[]}]}],filePathRelative:"javase/basic/06_面向对象基础.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},65154:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(66252);const t=a.p+"assets/img/图纸和汽车.17d941eb.jpg",e=(0,p.uE)('<h2 id="一、类和对象" tabindex="-1"><a class="header-anchor" href="#一、类和对象" aria-hidden="true">#</a> 一、类和对象</h2><h3 id="_1-1、什么对象" tabindex="-1"><a class="header-anchor" href="#_1-1、什么对象" aria-hidden="true">#</a> 1.1、什么对象</h3><blockquote><p>面向对象编程（Object Oriented Programming）</p><ul><li>一切客观存在的事物（一辆车、一本书、一个人）都是对象，万事万物皆对象；</li><li>任何对象，一定具有自己的特征和行为。</li></ul><p><strong>对象</strong>是实际存在的该类事务的每个个体，因而也称实例(instance)。</p></blockquote><h3 id="_1-2、什么是类" tabindex="-1"><a class="header-anchor" href="#_1-2、什么是类" aria-hidden="true">#</a> 1.2、什么是类</h3><blockquote><p><strong>类</strong>是对一类事物描述，是抽象的、概念上的<strong>定义</strong>。</p></blockquote><h3 id="_1-3、类和对象的关系" tabindex="-1"><a class="header-anchor" href="#_1-3、类和对象的关系" aria-hidden="true">#</a> 1.3、类和对象的关系</h3><p><img src="'+t+'" alt=""></p><blockquote><p>Java的类用于<strong>描述</strong>现实生活中的事物，生活中，在车间通过图纸造汽车。JAVA里面通过类设计汽车，通过new关键字来创建汽车。生活中的汽车在马路上面跑。Java中的汽车在内存中跑。</p><p><strong>对象</strong>：汽车</p><p><strong>类</strong>：汽车的设计图纸</p></blockquote><h3 id="_1-4、为什么设计类" tabindex="-1"><a class="header-anchor" href="#_1-4、为什么设计类" aria-hidden="true">#</a> 1.4、为什么设计类</h3><blockquote><p>基本数据类型无法满足程序设计的要求，我们需要自定义类型满足程序设计的要求，类其实就是一种<strong>自定义的类型</strong>。</p></blockquote><h2 id="二、类的组成与创建对象" tabindex="-1"><a class="header-anchor" href="#二、类的组成与创建对象" aria-hidden="true">#</a> 二、类的组成与创建对象</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>\n    属性\n    <span class="token punctuation">[</span>构造方法<span class="token punctuation">]</span>\n    方法    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p><strong>修饰符</strong>：可以省略，目前我们暂时填写<code>public</code>；</p><p><strong>类名</strong>：要符合标识符的命名规范。</p><p><strong>属性</strong>描述了<strong>类</strong>描述的事物所具有的特性，代表<strong>有什么</strong>。</p><p><strong>方法</strong>描述了<strong>类</strong>描述的事物所具有的动作，代表<strong>能做什么</strong>。</p></blockquote><h3 id="_2-1、属性" tabindex="-1"><a class="header-anchor" href="#_2-1、属性" aria-hidden="true">#</a> 2.1、属性</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 数据类型 属性名 <span class="token punctuation">[</span><span class="token operator">=</span> 初始值<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p><strong>修饰符</strong>：可以省略，目前我们暂时填写<code>public</code>；</p><p><strong>数据类型</strong>：任意的数据类型，可以是基本数据类型也可以是引用数据类型；</p><p><strong>属性名</strong>：属性的名字，要符合标识符的命名规范；</p><p><strong>初始值</strong>：在设计类时，可以为属性指定初始值，也可以不指定初始值，如果不指定，那么属性有默认的初始值。</p><p>属性有时也被称为：成员变量，数据成员。</p></blockquote><h3 id="_2-2、方法" tabindex="-1"><a class="header-anchor" href="#_2-2、方法" aria-hidden="true">#</a> 2.2、方法</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token number">1</span>，参数类型 参数名<span class="token number">2</span>…<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    方法体<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p><strong>修饰符</strong>：比较多，后面会详细介绍。目前我们暂时填写<code>public</code>；</p><p><strong>方法名</strong>：一个名字，为了方便我们调用方法，要符合标识符的命名规范，见名知意；</p><p><strong>参数类型</strong>：限定调用方法时传入参数的数据类型；</p><p><strong>参数名</strong>：接收调用方法时传入的参数，要符合标识符的命名规范，见名知意；</p><p><strong>方法体</strong>：完成功能的代码；</p><p><strong>return</strong>：结束方法以及返回方法指定类型的值；</p><p><strong>返回值类型</strong>：用于限定返回值的数据类型。如果没有返回值，返回值类型为<code>void</code>，此时<code>return</code>语句有如下两种写法：</p><ul><li><code>return;</code></li><li>可以不写<code>return</code>语句</li></ul><p><strong>返回值</strong>，程序被<code>return</code>带回的结果，返回给调用者。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n * 类的定义\n * \n * 修饰符 class 类名 {\n * \t\t属性-----特性-----成员变量\n * \t\t构造方法\n * \t\t方法-----动作-----能做什么事情-----成员方法\n * }\n * \n * 方法\n * \t修饰符 返回值类型 方法名(参数列表) {\n * \t\t方法体\n * \t\treturn 返回值;\n * \t}\n * 属性\n * \t修饰符 数据类型 属性名 = 初始值;\n * */</span>\n<span class="token comment">//表示人的类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 姓名</span>\n\t<span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">// 年龄</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span><span class="token comment">// 性别</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span><span class="token comment">// 身份证号</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> tel<span class="token punctuation">;</span><span class="token comment">// 电话</span>\n\n\t<span class="token comment">// 跑步</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 类中的方法可以直接访问类的属性\n\t\t */</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; running....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 学习</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="_2-3、对象的创建和使用" tabindex="-1"><a class="header-anchor" href="#_2-3、对象的创建和使用" aria-hidden="true">#</a> 2.3、对象的创建和使用</h3><blockquote><p>使用<code>new</code>关键字创建一个新的对象；</p><p>使用<code>对象名.对象成员</code>的方式访问对象成员（包括属性和方法）；</p><p>如果创建了一个类的多个对象，对于类中定义的属性，每个对象都拥有各自的一套副本，且<strong>互不干扰</strong>；</p><p>对象创建后，属性会被赋初值，默认的初始值如下：</p><ul><li>存放基本数据类型数据成员变量的初始值 <ul><li><code>int</code>：0</li><li><code>byte</code>：0</li><li><code>short</code>：0</li><li><code>long</code>：0</li><li><code>float</code>：0.0</li><li><code>double</code>：0.0</li><li><code>char</code>：<code>&#39;\\u0000&#39;</code></li><li><code>boolean</code>：<code>false</code></li></ul></li><li>存放引用数据类型数据成员变量的初始值：<code>null</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest1</span> <span class="token punctuation">{</span>\n\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 如何根据类创建对象\n\t\t * new+构造方法\n\t\t * 构造方法-----方法名和类名相同\n\t\t * \n\t\t * new Person();\n\t\t * */</span>\n\t\t<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//创建表示人的对象</span>\n\t\t<span class="token comment">/*\n\t\t * p1、p2、p3----对象名、对象的引用\n\t\t * 他们并不是对象本身\n\t\t * */</span>\n\t\t<span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">/*\n\t\t * 对象名.成员----访问对象中的属性和方法\n\t\t * */</span>\n\t\tp1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span><span class="token comment">//修改p1的name</span>\n\t\t<span class="token comment">/*\n\t\t * 在不同类当中访问类的属性，需要先创建类的对象，然后根据类的对象访问属性\n\t\t * */</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印p1的name</span>\n\t\tp1<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tp1<span class="token punctuation">.</span><span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">/*\n\t\t * 每个对象是单独的个体，修改一个对象的属性后，其他对象的属性不受影响\n\t\t * */</span>\n\t\tp2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">/*\n\t\t * 对象创建之后，对象的属性会被赋初值\n\t\t * int----0\n\t\t * byte---0\n\t\t * long---0\n\t\t * short--0\n\t\t * char---0\n\t\t * double-0.0\n\t\t * float--0.0F\n\t\t * boolearn---false\n\t\t * 引用----null\n\t\t * */</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\tp3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n\t\tp3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tp1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t\tp2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>\n\t\t<span class="token comment">//基本数据类型参数的传递</span>\n\t\t<span class="token function">chg</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>\n\t\t\n\t\t<span class="token class-name">Demo</span> dm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tdm<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dm<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//引用数据类型参数传递</span>\n\t\t<span class="token comment">//d = dm</span>\n\t\t<span class="token function">chg</span><span class="token punctuation">(</span>dm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dm<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1000</span>\n\t\t\n\t\t\n\t\t<span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tp4<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\t\tp4<span class="token punctuation">.</span><span class="token function">addAge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p4<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token comment">//a = x</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">chg</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ta <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">chg</span><span class="token punctuation">(</span><span class="token class-name">Demo</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\td<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//Demo类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br></div></div><blockquote><p><strong>值传递（传值）</strong>：当基本类型作为参数传入方法时，无论该参数（原型变量的一个值得拷贝）在方法内怎样被改变，外部的变量原型总是不变的。</p><p><strong>引用传递</strong>：当引用作为参数传入方法时，通过引用在方法内部修改引用关联的数据，数据本身会被修改。</p></blockquote><h3 id="_2-4、类的访问机制" tabindex="-1"><a class="header-anchor" href="#_2-4、类的访问机制" aria-hidden="true">#</a> 2.4、类的访问机制</h3><blockquote><p><strong>在一个类中的访问机制</strong>：类中的方法可以直接访问类中的成员变量。<strong>例外：static方法访问非static，编译不通过</strong>。</p><p><strong>在不同类中的访问机制</strong>：先创建要访问类的对象，再用对象访问类中定义的成员。</p></blockquote><h3 id="_2-5、成员变量和局部变量" tabindex="-1"><a class="header-anchor" href="#_2-5、成员变量和局部变量" aria-hidden="true">#</a> 2.5、成员变量和局部变量</h3><table><thead><tr><th></th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>定义位置</td><td>类的内部，方法的外部</td><td>方法或方法内的代码块中</td></tr><tr><td>默认值</td><td>有默认值，和数组元素默认值相同</td><td>没有默认值</td></tr><tr><td>生命周期</td><td>成员变量随着对象的创建而产生，随着对象的消失而消失</td><td>局部变量随着区域的执行而存在，随着区域的结束而释放</td></tr><tr><td>使用范围</td><td>成员变量定义在类中，整个类中都可以使用</td><td>局部变量定义在方法代码块中，只在所属的区域有效</td></tr></tbody></table><h2 id="三、方法重载" tabindex="-1"><a class="header-anchor" href="#三、方法重载" aria-hidden="true">#</a> 三、方法重载</h2><blockquote><p>在<strong>同一个类</strong>中，允许存在一个以上的<strong>同名</strong>方法，只要它们的<strong>参数个数或者参数类型</strong>不同即可。</p><p>特点：</p><ul><li>与返回值类型无关，只看方法名和参数列表；</li><li>在调用时，JVM通过参数列表的不同来区分同名方法。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 姓名</span>\n\t<span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">// 年龄</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span><span class="token comment">// 性别</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span><span class="token comment">// 身份证号</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> tel<span class="token punctuation">;</span><span class="token comment">// 电话</span>\n\n\t<span class="token comment">// 跑步</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 类中的方法可以直接访问类的属性\n\t\t */</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; running....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 学习 - 方法重载</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n    \n    <span class="token comment">// 学习 - 方法重载</span>\n   \t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn...&quot;</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><blockquote><p>测试方法重载</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//创建对象</span>\n        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//调用方法</span>\n        p1<span class="token punctuation">.</span><span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//调用方法</span>\n        p1<span class="token punctuation">.</span><span class="token function">learn</span><span class="token punctuation">(</span><span class="token string">&quot;JavaSE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="四、构造方法" tabindex="-1"><a class="header-anchor" href="#四、构造方法" aria-hidden="true">#</a> 四、构造方法</h2><h3 id="_4-1、是什么" tabindex="-1"><a class="header-anchor" href="#_4-1、是什么" aria-hidden="true">#</a> 4.1、是什么</h3><blockquote><p>类中的特殊方法，主要用于创建对象，在对象创建时被调用。</p><p>当一个类的实例对象刚产生时，这个类的构造方法就会被自动调用，我们可以在这个方法中加入要完成初始化工作的代码。</p></blockquote><h3 id="_4-2、作用和特点" tabindex="-1"><a class="header-anchor" href="#_4-2、作用和特点" aria-hidden="true">#</a> 4.2、作用和特点</h3><blockquote><p>作用：</p><ul><li>给对象进行初始化。</li></ul><p>特点：</p><ul><li>方法名与类名相同；</li><li>不用定义返回值类型；</li><li>没有具体的返回值。</li></ul></blockquote><h3 id="_4-3、构造方法相关细节" tabindex="-1"><a class="header-anchor" href="#_4-3、构造方法相关细节" aria-hidden="true">#</a> 4.3、构造方法相关细节</h3><blockquote><ol><li><strong>不管有没有显式定义构造方法，创建对象都必须要通过构造方法初始化</strong>；</li><li><strong>一个类中如果没有定义过构造方法，那么该类中会有一个默认的空参数构造方法</strong>；</li><li><strong>如果在类中定义了有参的构造方法，那么类中的默认构造方法会被覆盖，如果此时需要使用无参的构造方法，则要手动定义</strong>；</li><li>构造方法可以有多个，用于对不同的对象进行针对性的初始化；</li><li>多个构造方法在类中是以重载的形式来体现的。</li></ol></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 姓名</span>\n\t<span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">// 年龄----私有的</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span><span class="token comment">// 性别</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span><span class="token comment">// 身份证号</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> tel<span class="token punctuation">;</span><span class="token comment">// 电话</span>\n\n\t<span class="token comment">/*\t构造方法\n\t * \t1.方法名和类名相同\n\t * \t2.不用定义返回值类型\n\t * \t3.在对象被创建的时候调用\n\t * \t4.不管有没有定义构造方法，创建对象时都会调用构造方法进行初始化\n\t * \t5.如果一个类中没有定义构造方法，那么该类中存在默认的无参的构造方法\n\t * \t\tpublic Person() {\n\t * \n\t * \t\t}\n\t *  6.如果在类中自定义了构造方法，那么默认的构造方法会被覆盖\n\t *  \t如果想使用默认的构造方法要如何做？----自己手写一个默认的构造方法\n\t * */</span>\n\t<span class="token comment">/*public Person() {\n\t\tSystem.out.println(&quot;创建Person对象&quot;);\n\t}*/</span>\n\t<span class="token comment">/*\n\t * 默认的构造方法\n\t * */</span>\n\t<span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">/*\n\t * 带参数的构造方法\n\t * */</span>\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> n<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//带参数的构造方法</span>\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> g<span class="token punctuation">,</span> <span class="token class-name">String</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> n<span class="token punctuation">;</span>\n        age <span class="token operator">=</span> a<span class="token punctuation">;</span>\n        gender <span class="token operator">=</span> g<span class="token punctuation">;</span>\n        id <span class="token operator">=</span> i<span class="token punctuation">;</span>\n        tel <span class="token operator">=</span> t<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\t\n\t<span class="token comment">// 跑步</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 类中的方法可以直接访问类的属性\n\t\t */</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; running....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 学习 - 方法重载</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n    \n    <span class="token comment">// 学习 - 方法重载</span>\n   \t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn...&quot;</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><blockquote><p>测试构造方法</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest3</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Person</span> p<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="五、this关键字" tabindex="-1"><a class="header-anchor" href="#五、this关键字" aria-hidden="true">#</a> 五、this关键字</h2><blockquote><p>功能：</p><ul><li>表示当前对象；</li><li>表示构造方法</li></ul></blockquote><h3 id="_5-1、表示当前对象" tabindex="-1"><a class="header-anchor" href="#_5-1、表示当前对象" aria-hidden="true">#</a> 5.1、表示当前对象</h3><blockquote><p><code>this</code>可以用来指代当前对象，<strong>当成员变量和局部变量重名，可以用关键字this来区分</strong>。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 姓名</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">// 年龄</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span><span class="token comment">// 性别</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span><span class="token comment">// 身份证号</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> tel<span class="token punctuation">;</span><span class="token comment">// 电话</span>\n\n    <span class="token comment">//默认的构造方法 - 没有参数</span>\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//带参数的构造方法</span>\n    <span class="token comment">//当成员变量和局部变量重名，可以用关键字this来区分</span>\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//带参数的构造方法</span>\n    <span class="token comment">//当成员变量和局部变量重名，可以用关键字this来区分</span>\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>tel <span class="token operator">=</span> tel<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 跑步</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; running....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 学习 - 方法重载</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 学习 - 方法重载</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn...&quot;</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h3 id="_5-2、表示构造方法" tabindex="-1"><a class="header-anchor" href="#_5-2、表示构造方法" aria-hidden="true">#</a> 5.2、表示构造方法</h3><blockquote><p><code>this</code>也可以表示构造方法，<strong>用于在构造函数中调用其他构造函数</strong>。</p><p>注意：只能定义在构造函数的第一行。因为初始化动作要先执行。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 姓名</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">// 年龄</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span><span class="token comment">// 性别</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span><span class="token comment">// 身份证号</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> tel<span class="token punctuation">;</span><span class="token comment">// 电话</span>\n\n    <span class="token comment">//默认的构造方法 - 没有参数</span>\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//带参数的构造方法</span>\n    <span class="token comment">/*\n    *   如果定义了带参数的构造方法，则默认的无参构造方法会被覆盖(此时默认的无参构造方法无法使用)\n    *   此时如果希望试用无参的构造方法，需要手动定义\n    * */</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//this用于在构造函数中调用其他构造函数</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//this用于在构造函数中调用其他构造函数</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//this用于在构造函数中调用其他构造函数</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//带参数的构造方法</span>\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> tel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//this用于在构造函数中调用其他构造函数</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>tel <span class="token operator">=</span> tel<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 跑步</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * 类中的方法可以直接访问类的属性\n         */</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; running....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 学习 - 方法重载</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 学习 - 方法重载</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn...&quot;</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div>',51),c={},l=(0,a(83744).Z)(c,[["render",function(n,s){return e}]])}}]);