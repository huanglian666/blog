"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[1700],{68365:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2a981428",path:"/javase/basic/10_%E5%B8%B8%E7%94%A8%E7%B1%BB.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、什么是API",slug:"一、什么是api",children:[{level:3,title:"1.1、Java API",slug:"_1-1、java-api",children:[]},{level:3,title:"1.2、Java常用类库简介",slug:"_1-2、java常用类库简介",children:[]}]},{level:2,title:"二、Object类",slug:"二、object类",children:[{level:3,title:"2.1、简介",slug:"_2-1、简介",children:[]},{level:3,title:"2.2、常用方法",slug:"_2-2、常用方法",children:[]}]},{level:2,title:"三、包装类",slug:"三、包装类",children:[{level:3,title:"3.1、目前存在的问题及包装类简介",slug:"_3-1、目前存在的问题及包装类简介",children:[]},{level:3,title:"3.2、装修和拆箱",slug:"_3-2、装修和拆箱",children:[]},{level:3,title:"3.3、基本数据类型和字符串转换",slug:"_3-3、基本数据类型和字符串转换",children:[]}]},{level:2,title:"四、String类",slug:"四、string类",children:[{level:3,title:"4.1、创建",slug:"_4-1、创建",children:[]},{level:3,title:"4.2、常用方法",slug:"_4-2、常用方法",children:[]},{level:3,title:"4.3、关于字符串不可变的理解",slug:"_4-3、关于字符串不可变的理解",children:[]},{level:3,title:"4.4、可变字符串",slug:"_4-4、可变字符串",children:[]}]},{level:2,title:"五、数学相关类",slug:"五、数学相关类",children:[{level:3,title:"5.1、Math类",slug:"_5-1、math类",children:[]},{level:3,title:"5.2、BigDecimal类",slug:"_5-2、bigdecimal类",children:[]}]},{level:2,title:"六、日期时间相关类",slug:"六、日期时间相关类",children:[{level:3,title:"6.1、Date",slug:"_6-1、date",children:[]},{level:3,title:"6.2、SimpleDateFormat",slug:"_6-2、simpledateformat",children:[]},{level:3,title:"6.3、Calendar",slug:"_6-3、calendar",children:[]},{level:3,title:"6.4、JDK8中新日期时间API",slug:"_6-4、jdk8中新日期时间api",children:[]}]}],filePathRelative:"javase/basic/10_常用类.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},47692:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var p=a(66252);const t=a.p+"assets/img/JDKAPI.4142c80d.jpg",e=(0,p.uE)('<h2 id="一、什么是api" tabindex="-1"><a class="header-anchor" href="#一、什么是api" aria-hidden="true">#</a> 一、什么是API</h2><blockquote><p>定义：<code>Application Programming Interface</code>，<code>API</code>是应用程序编程接口，指一些预先定义好的类。</p></blockquote><h3 id="_1-1、java-api" tabindex="-1"><a class="header-anchor" href="#_1-1、java-api" aria-hidden="true">#</a> 1.1、<code>Java API</code></h3><blockquote><p><code>Java API</code>就是Oracle公司提供给我们使用的类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，<strong>只需要学习这些类如何使用</strong>。</p><p>主要内容：类层次结构、类及其一般目的的说明、成员变量表、构造函数表、方法表、变量详细说明表及每一个变量使用目的的详细描述、构造方法的详细说明及进一步的描述等等。</p></blockquote><p><img src="'+t+'" alt=""></p><blockquote><p>如何使用:</p><ul><li>左上是所有的包；</li><li>当在软件包中选择一个包时，左下会显示这个软件包中所有的类和接口；</li><li>点击相应的类和接口，右侧会有相应的类和接口的详细信息。</li></ul><p>如何学习：</p><ul><li>不需要全部学习，用到时再学习，<strong>但是需要先掌握一些常用的，不同的领域有不同的API</strong>，没有人熟悉所有的API，对一般人而言只是熟悉工作中要用到的API；</li><li>某一领域知识+案例，很容易掌握API；</li><li>字典：现用现查。</li></ul></blockquote><h3 id="_1-2、java常用类库简介" tabindex="-1"><a class="header-anchor" href="#_1-2、java常用类库简介" aria-hidden="true">#</a> 1.2、Java常用类库简介</h3><blockquote><p>Java程序设计就是定义类的过程，定义的类分为两大类：</p><ul><li>系统定义的类：即Java类库中的类。这部分类是已经设计好的，直接用就可以。也是我们这里所指的Java类库中的主要内容；</li><li>用户程序自定义的类：需要开发人员自己设计实现。</li></ul><p>重要的包及其类：</p><ul><li><code>java.lang</code>：包括了Java语言程序设计的基础类；</li><li><code>java.util</code>：包含集合、日期和各种实用工具类；</li><li><code>java.io</code>：包含可提供数据输入、输出相关功能的类；</li><li><code>java.net</code>：提供用于实现Java网络编程的相关功能类；</li><li><code>java.sql</code>：提供数据库操作相关功能类。</li></ul><p>注意：<code>java.lang</code>是默认会导入的包，不需要手动导入。</p></blockquote><h2 id="二、object类" tabindex="-1"><a class="header-anchor" href="#二、object类" aria-hidden="true">#</a> 二、<code>Object</code>类</h2><h3 id="_2-1、简介" tabindex="-1"><a class="header-anchor" href="#_2-1、简介" aria-hidden="true">#</a> 2.1、简介</h3><blockquote><p><code>Object</code>类是所有类的直接或间接父类，位于继承树的最顶层。</p><p>任何类，如果没有明确书写<code>extends</code>继承某个类，都默认直接继承<code>Object</code>类，否则为间接继承。</p><p><code>Object</code>类中所定义的方法，是所有对象都具备的方法。</p><p><code>Object</code>类型可以存储任何对象</p><ul><li>作为参数，可接收任何对象；</li><li>作为返回值，可返回任何对象。</li></ul></blockquote><h3 id="_2-2、常用方法" tabindex="-1"><a class="header-anchor" href="#_2-2、常用方法" aria-hidden="true">#</a> 2.2、常用方法</h3><h4 id="_2-2-1、tostring方法" tabindex="-1"><a class="header-anchor" href="#_2-2-1、tostring方法" aria-hidden="true">#</a> 2.2.1、<code>toString</code>方法</h4><blockquote><p>方法定义：<code>public String toString()</code></p><p>返回一个对象的字符串表示形式；</p><p>当打印引用，如调用<code>System.out.println()</code>时，会自动调用对象的<code>toString()</code>方法，打印出引用所指的对象的<code>toString()</code>方法的返回值；</p><p>每个类都直接或间接地继承自<code>Object</code>，因此每个类都有<code>toString()</code>方法；</p><p>可以根据程序要求重写该方法。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * 表示Person的类\n * */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\t<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\t<span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>\n    \n    <span class="token comment">//set/get</span>\n\n    <span class="token comment">//Object类中的toString方法不能满足要求，重写toString</span>\n\t<span class="token annotation punctuation">@Override</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token string">&quot;Person [name=&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;, gender=&quot;</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest1</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tp1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ZhangSan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tp1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tp1<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="_2-2-2、equals方法" tabindex="-1"><a class="header-anchor" href="#_2-2-2、equals方法" aria-hidden="true">#</a> 2.2.2、<code>equals</code>方法</h4><blockquote><p>学习<code>equals</code>方法之前，有必要回顾一些<code>==</code>运算符。</p><p><code>==</code>作用：</p><ul><li>判断基本数据类型值是否相同；</li><li>判断两个引用是否指向同一个对象（判断两个对象的地址是否相同）</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断基本数据类型</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n\t\t<span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断两个引用是否指向同一个对象</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>方法定义：<code>public boolean equals(Object obj)</code></p><p>对于<code>Object</code>类的<code>equals()</code>方法来说，它判断调用<code>equals()</code>方法的引用（方法调用者）与传进来的引用（方法参数）是否一致，即这两个引用是否指向的是同一个对象，<code>Object</code>类中的<code>equals()</code>方法等价于<code>==</code>。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断基本数据类型</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n\t\t<span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断两个引用是否指向同一个对象</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//equals()等价于==</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>多数时候，我们希望判断两个相同类型对象的每个属性的值是的相同（<strong>值</strong>是否相同，内容是否相同），此时从<code>Object</code>中继承的<code>equals()</code>方法无法满足我们的需求，我们需要在自定义类中重写该方法（参考<code>String</code>类相关源码）。</p><p>修改<code>Person</code>类</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * 表示Person的类\n * */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\t<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\t<span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>\n    \n    <span class="token comment">//set/get</span>\n    \n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">,</span> person<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//Object类中的toString方法不能满足要求，重写toString</span>\n\t<span class="token annotation punctuation">@Override</span>\n\t<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token string">&quot;Person [name=&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;, gender=&quot;</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="_2-2-3、hashcode方法" tabindex="-1"><a class="header-anchor" href="#_2-2-3、hashcode方法" aria-hidden="true">#</a> 2.2.3、<code>hashCode</code>方法</h4><blockquote><p>方法定义：<code>public int hashCode()</code></p><p>这个方法返回对象的十进制的哈希值。哈希值是通过哈希算法<strong>根据对象的地址</strong>计算出来的int类型的数组。</p><p><code>Object</code>类的<code>hashCode()</code>方法为不同的对象返回不同的值，<code>Object</code>类的<code>hashCode</code>值我们可以认为其表示对象的地址。</p><p>如果<code>equals()</code>判断两个对象相等，那么它们的<code>hashCode()</code>方法应该返回同样的值。</p></blockquote><h2 id="三、包装类" tabindex="-1"><a class="header-anchor" href="#三、包装类" aria-hidden="true">#</a> 三、包装类</h2><h3 id="_3-1、目前存在的问题及包装类简介" tabindex="-1"><a class="header-anchor" href="#_3-1、目前存在的问题及包装类简介" aria-hidden="true">#</a> 3.1、目前存在的问题及包装类简介</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>如果一个类中有上述方法，利用多态性，我们可以传入任意类的对象，但是不能传入基本数据类型数据。为了能让<code>test</code>方法传入基本数据类型数据，需要再定义8个重载的方法用来兼容8种基本数据类型。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">byte</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>如果每次碰到这种场景，都要额外写8个重载的方法，会让代码变得臃肿。此时，<strong>我们需要一种可以将基本数据类型数据当成对象使用的技术。</strong></p><p>Java提供了8个基本数据类型的包装类，将基本数据类型包装成相应的对象，并定义许多实用的方法供这些对象调用用来解决基本数据类型数据不能被当成对象使用的问题。</p><p>这8个类统称为包装器（Wrapper）类，而且都在<code>java.lang</code>包中，所以不需要<code>import</code>就可以直接使用。</p><p>8种基本数据类型和其包装类对应关系如下：</p><ul><li><code>byte -- Byte</code></li><li><code>short -- Short</code></li><li><code>int -- Integer</code></li><li><code>long -- Long</code></li><li><code>float -- Float</code></li><li><code>double -- Double</code></li><li><code>char -- Character</code></li><li><code>boolean -- Boolean</code></li></ul><p>除了<code>Integer</code>和<code>Character</code>类，其它六个类的类名和基本数据类型一致，只是类名的第一个字母大写即可。</p></blockquote><h3 id="_3-2、装修和拆箱" tabindex="-1"><a class="header-anchor" href="#_3-2、装修和拆箱" aria-hidden="true">#</a> 3.2、装修和拆箱</h3><blockquote><p>装箱：基本数据类型转换成包装类；</p><p>拆箱：包装类转换成基本数据类型。</p><p>手动拆装箱</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * 手动装箱\n * \t基本数据类型---&gt;包装类\n * */</span>\n<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token class-name">Integer</span> i  <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n * 手动拆箱\n * \t包装了---&gt;基本数据类型\n * */</span>\n<span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>JDK自从1.5(5.0)版本以后，就引入了自动拆装箱的语法，也就是在进行基本数据类型和对应的包装类转换时，系统将自动进行，这将大大方便程序员的代码书写。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * 自动装箱 JDK1.5\n * */</span>\n<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token class-name">Integer</span> i1 <span class="token operator">=</span> a<span class="token punctuation">;</span>\n<span class="token comment">/*\n * 自动拆箱 JDK1.5\n * */</span>\n<span class="token keyword">int</span> c <span class="token operator">=</span> i1<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3-3、基本数据类型和字符串转换" tabindex="-1"><a class="header-anchor" href="#_3-3、基本数据类型和字符串转换" aria-hidden="true">#</a> 3.3、基本数据类型和字符串转换</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * 基本数据类型和字符串转换\n * \t基本数据类型---&gt;字符串\n * \t\tint x = 10;  &quot;10&quot;\n * \t\tx + &quot;&quot;;\n * \t字符串---&gt;基本数据类型\n * \t\tString str = &quot;10&quot;;\n * */</span>\n<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> s <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n * 字符串---&gt;基本数据类型\n * String---&gt;int\n * */</span>\n<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">;</span>\nx <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="四、string类" tabindex="-1"><a class="header-anchor" href="#四、string类" aria-hidden="true">#</a> 四、<code>String</code>类</h2><blockquote><p>Java程序可以方便的处理字符串类型的数据信息，而这都要归功于Java中<code>String</code>类提供的强大功能。 <code>String</code>类描述的是文本字符串序列，即多个字符组成的一串数据。 <code>String</code>类代表字符串。Java 程序中的所有字符串字面值（如 <code>&quot;abc&quot;</code> ）都作为此类的实例实现</p><p><strong>字符串是不可变的。一个字符串对象一旦被配置，其内容是不可变的。</strong></p></blockquote><h3 id="_4-1、创建" tabindex="-1"><a class="header-anchor" href="#_4-1、创建" aria-hidden="true">#</a> 4.1、创建</h3><blockquote><p>常见创建方式：</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_4-2、常用方法" tabindex="-1"><a class="header-anchor" href="#_4-2、常用方法" aria-hidden="true">#</a> 4.2、常用方法</h3><h4 id="_4-2-1、判断功能" tabindex="-1"><a class="header-anchor" href="#_4-2-1、判断功能" aria-hidden="true">#</a> 4.2.1、判断功能</h4><blockquote><ul><li><code>boolean equals(Object obj)</code></li><li><code>boolean equalsIgnoreCase(String str)</code></li><li><code>boolean contains(String str)</code></li><li><code>boolean startsWith(String str)</code></li><li><code>boolean endsWith(String str) </code></li><li><code>boolean isEmpty() </code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n * equals() 判断字符串的内容是否相等\n * */</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//equalsIgnoreCase() 忽略大小写判断内容是否相等</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;ABCD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//startsWith()</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;bc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//endsWith()</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;bc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;bcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//isEmpty()</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="_4-2-2、获取功能" tabindex="-1"><a class="header-anchor" href="#_4-2-2、获取功能" aria-hidden="true">#</a> 4.2.2、获取功能</h4><blockquote><ul><li><code>int length()</code></li><li><code>char charAt(int index)</code></li><li><code>int indexOf(int ch)</code></li><li><code>int indexOf(String str)</code></li><li><code>int indexOf(int ch, int fromIndex)</code></li><li><code>int indexOf(String str, int fromIndex)</code></li><li><code>String substring(int start)</code></li><li><code>String substring(int start, int end)</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//length()</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abcde&quot;</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//charAt()</span>\n<span class="token comment">//System.out.println(str2.charAt(100));</span>\n<span class="token comment">//indexOf() 返回字符首次出现的索引,如果没有被判断的字符，返回-1</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abcdabc&quot;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//判断字符串首次出现的索引</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abcdabc&quot;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;bcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abcdabc&quot;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abcdabc&quot;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//获取字串</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abcdabc&quot;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//获取字串，但是不包含end</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abcdabc&quot;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_4-2-3、转换功能" tabindex="-1"><a class="header-anchor" href="#_4-2-3、转换功能" aria-hidden="true">#</a> 4.2.3、转换功能</h4><blockquote><ul><li><code>byte[] getBytes()</code></li><li><code>char[] toCharArray()</code></li><li><code>static String valueOf(char[] chs)</code></li><li><code>static String valueOf(int i) </code></li><li><code>String toLowerCase() </code></li><li><code>String toUpperCase() </code></li><li><code>String concat(String str)</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * 字符串的转换功能\n * */</span>\n<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">//getBytes()转换成byte类型的数组</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//toCharArray()转换成char类型的数组</span>\n<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrChar <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arrChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//大小写转换</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ABCD&quot;</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n * 字符串连接---生成了新的字符串\n * */</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;****&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//基本数据类型---&gt;字符串</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100.56F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="_4-2-4、替换功能" tabindex="-1"><a class="header-anchor" href="#_4-2-4、替换功能" aria-hidden="true">#</a> 4.2.4、替换功能</h4><blockquote><ul><li><code>String replace(char old, char new)</code></li><li><code>String replace(String old, String new)</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * 替换功能---生成了新的字符串\n * */</span>\n<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello 123&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;ll&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_4-2-5、去空格功能" tabindex="-1"><a class="header-anchor" href="#_4-2-5、去空格功能" aria-hidden="true">#</a> 4.2.5、去空格功能</h4><blockquote><ul><li><code>trim()</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * 去除空格的功能\n * trim()---去除字符串首位的空格\n * */</span>\n<span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot; ab c &quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_4-2-6、按字典比较" tabindex="-1"><a class="header-anchor" href="#_4-2-6、按字典比较" aria-hidden="true">#</a> 4.2.6、按字典比较</h4><blockquote><ul><li><code>int compareTo(String str)</code></li><li><code>int compareToIgnoreCase(String str)</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">&quot;abd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">&quot;abdd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_4-2-7、案例" tabindex="-1"><a class="header-anchor" href="#_4-2-7、案例" aria-hidden="true">#</a> 4.2.7、案例</h4><blockquote><p>注册案例：对输入的用户名和密码进行格式验证</p><ul><li>去掉多余的空格</li><li>不能为空</li><li>用户名和密码不能超过16位</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Regist</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 注册程序\n\t\t * 对输入的用户名和密码进行校验\n\t\t * \n\t\t * 1.去除多余空格\n\t\t * 2.不能为空  &gt; 0\n\t\t * 3.长度小于等于16 \n\t\t * */</span>\n\t\t<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入用户名:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">String</span> username <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">judge</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户名不能为空，长度不超过16位&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">String</span> password <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">judge</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;密码不能为空，长度不超过16位&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token comment">//.....</span>\n\t\t<span class="token comment">//.....</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">//内容校验</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">//去掉多余空格</span>\n\t\t<span class="token class-name">String</span> s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//获取字符串长度</span>\n\t\t<span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//判断字符串长度是否合法</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h3 id="_4-3、关于字符串不可变的理解" tabindex="-1"><a class="header-anchor" href="#_4-3、关于字符串不可变的理解" aria-hidden="true">#</a> 4.3、关于字符串不可变的理解</h3><blockquote><p>字符串都放在字符串常量池中，相同内容的字符串在常量池中只有一份。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * 字符串是不可变的\n\t\t * \n\t\t * 内存\n\t\t * \t栈\n\t\t * \t堆\n\t\t * \t静态区(字符串常量池)\n\t\t * \n\t\t *\t1.字符串都放在字符串常量池中\n\t\t *\t2.相同内容的字符串在常量池中只有一份\n\t\t * \n\t\t * */</span>\n\t\t<span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;多喝热水&quot;</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;多喝热水&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;多喝热水&quot;</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>\n\t\t\n\t\t<span class="token comment">//编译器进行优化，编译阶段就能计算出结果</span>\n\t\t<span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">&quot;多喝&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;热水&quot;</span><span class="token punctuation">;</span><span class="token comment">//&quot;多喝热水&quot; str4 = &quot;多喝热水&quot;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>\n\t\t\t\t\n\t\t<span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token string">&quot;多喝&quot;</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">String</span> str6 <span class="token operator">=</span> <span class="token string">&quot;热水&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">//只要其中有一个是变量，结果就在堆中</span>\n\t\t<span class="token class-name">String</span> str7 <span class="token operator">=</span> str5 <span class="token operator">+</span> str6<span class="token punctuation">;</span>\n\t\t<span class="token class-name">String</span> str8 <span class="token operator">=</span> str5 <span class="token operator">+</span> <span class="token string">&quot;热水&quot;</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>\n\t\t\n\t\tstr1 <span class="token operator">=</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="_4-4、可变字符串" tabindex="-1"><a class="header-anchor" href="#_4-4、可变字符串" aria-hidden="true">#</a> 4.4、可变字符串</h3><blockquote><p><code>StringBuffer</code></p><p>**优势：**解决了String用字符串做拼接，既费时又耗内存的问题。</p><p>字符串缓冲区，用于存储可变字符序列的容器。</p><p>特点</p><ul><li>可以对字符串进行修改</li><li>长度可变</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/*\n\t\t * StringBuffer---带缓冲区的字符串\n\t\t * 可以对字符串进行动态的拼接\n\t\t * \n\t\t * 如何创建\n\t\t * */</span>\n\t\t<span class="token class-name">StringBuffer</span> stb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">/*\n\t\t * 如何拼接\n\t\t * */</span>\n\t\tstb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;***&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tstb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;$$$$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">/*\n\t\t * 如何StringBuffer----&gt;String\n\t\t * toString()\n\t\t * */</span>\n\t\t<span class="token class-name">String</span> str <span class="token operator">=</span> stb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p><code>StringBuilder</code></p><ul><li>JDK1.5以后出现了功能和<code>StringBuffer</code>一模一样的类，就是<code>StringBuilder</code></li><li>和<code>StringBuffer</code>的区别 <ul><li><code>StringBuffer</code>是线程同步的。通常用于多线程。</li><li><code>StringBuilder</code>是线程不同步(不安全)的。通常用于单线程。它的出现提高了处理可变字符串对象的效率。</li></ul></li></ul></blockquote><h2 id="五、数学相关类" tabindex="-1"><a class="header-anchor" href="#五、数学相关类" aria-hidden="true">#</a> 五、数学相关类</h2><h3 id="_5-1、math类" tabindex="-1"><a class="header-anchor" href="#_5-1、math类" aria-hidden="true">#</a> 5.1、<code>Math</code>类</h3><blockquote><p><strong>位置</strong>：</p><ul><li><code>java.lang</code>包中</li></ul><p><strong>常量：</strong></p><ul><li><code>PI</code>圆周率</li></ul><p><strong>常用方法：</strong></p><ul><li><code>ramdom()</code>：返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===============================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//0~9</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===============================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//1~10</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//1~4</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===============================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_5-2、bigdecimal类" tabindex="-1"><a class="header-anchor" href="#_5-2、bigdecimal类" aria-hidden="true">#</a> 5.2、<code>BigDecimal</code>类</h3><blockquote><p><strong>位置</strong>：</p><ul><li><code>java.lang</code>包中</li></ul><p>**作用：**精确计算浮点整数</p><p><strong>常用方法：</strong></p><ul><li><code>add(BigDecimal augend)</code>加</li><li><code>subtract(BigDecimal subtrahend)</code>减</li><li><code>multiply(BigDecimal multiplicand)</code>乘</li><li><code>divide(BigDecimal divisor)</code>除</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">BigDecimal</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">BigDecimal</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">9.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>进行除法运算时，如果不能准确的计算出结果时需要指定保留的位数和取舍方式。</p><p><code>divide(BigDecimal divisor, int scale, int roundingMode)</code></p><ul><li><code>scale</code>：指定精确到小数点后几位</li><li><code>mode</code>：指定小数部分的取舍模式，通常采用四舍五入的模式，取值为<code>BigDecimal.ROUND_HALF_UP</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">BigDecimal</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">BigDecimal</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">9.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="六、日期时间相关类" tabindex="-1"><a class="header-anchor" href="#六、日期时间相关类" aria-hidden="true">#</a> 六、日期时间相关类</h2><h3 id="_6-1、date" tabindex="-1"><a class="header-anchor" href="#_6-1、date" aria-hidden="true">#</a> 6.1、<code>Date</code></h3><blockquote><p>表示特定的瞬间，精确到毫秒。要注意该类中很多方法已经过时。</p><p><strong>构造方法</strong>：</p><ul><li><code>Date()</code>：分配<code>Date</code>对象并用当前时间初始化此对象，以表示分配它的时间(精确到毫秒)</li><li><code>Date(long date)</code>：分配<code>Date</code>对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日 00:00:00 GMT）以来的指定毫秒数。</li></ul><p><strong>常用方法</strong>：</p><ul><li><code>boolean after(Date anotherDate)</code>：测试此日期是否在指定日期之后</li><li><code>boolean before(Date anotherDate)</code>：测试此日期是否在指定日期之前</li><li><code>int compareTo(Date anotherDate)</code>：比较两个日期的顺序</li><li><code>long getTime()</code>：返回自1970年1月1日00:00:00 GMT以来此Date对象表示的毫秒数</li><li><code>void setTime(long time)</code>：以<code>long</code>类型参数time设置此Date对象，以表示1970年 1 月 1 日 00:00:00 GMT以后指定毫秒的时间点</li><li><code>String toString()</code>：默认实现是把此Date对象转换为以下形式的字符串<code>dow mon dd hh:mm:ss zzz yyyy</code><ul><li>dow是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)</li><li>mon是月份 (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)</li><li>dd是一月中的某一天（01 至 31），显示为两位十进制数</li><li>hh是一天中的小时（00 至 23），显示为两位十进制数</li><li>mm是小时中的分钟（00 至 59），显示为两位十进制数</li><li>ss是分钟中的秒数（00 至 61），显示为两位十进制数</li><li>zzz是时区（并可以反映夏令时）。标准时区缩写包括方法 parse 识别的时区缩写。如果不提供时区信息，则 zzz 为空，即根本不包括任何字符</li><li>yyyy是年份，显示为 4 位十进制数</li></ul></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest3</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * java.util.Date表示特定的瞬间，精确到毫秒\n         * */</span>\n        <span class="token comment">//创建Date对象，并使用当前时间进行初始化----代码运行到这一行的时间</span>\n        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//东八区</span>\n        \n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_6-2、simpledateformat" tabindex="-1"><a class="header-anchor" href="#_6-2、simpledateformat" aria-hidden="true">#</a> 6.2、<code>SimpleDateFormat</code></h3><blockquote><p>以指定格式输出日期和时间。</p><p>将<code>Date</code>类型与字符串转换：</p><ul><li><code>Date</code>转换成字符串：<code>format()</code></li><li>字符串转为<code>Date</code>：<code>parse()</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest4</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * SimpleDateFormat---对日期进行格式化\n         * \t1.创建SimpleDateFormat\n         * \t2.Date----特定的String\n         * \t\t|--format()---将日期格式化成指定的形式\n         * \t\t|--parse()---将特定的表示时间日期的字符串解析成Date\n         * */</span>\n        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">SimpleDateFormat</span> fmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//格式化日期</span>\n        <span class="token class-name">String</span> dateStr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">SimpleDateFormat</span> fmt1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//格式化日期</span>\n        <span class="token class-name">String</span> dateStr1 <span class="token operator">=</span> fmt1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateStr1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">SimpleDateFormat</span> fmt2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;hh:mm:ss a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//格式化日期</span>\n        <span class="token class-name">String</span> dateStr2 <span class="token operator">=</span> fmt2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateStr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">SimpleDateFormat</span> fmt3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日   HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//格式化日期</span>\n        <span class="token class-name">String</span> dateStr3 <span class="token operator">=</span> fmt3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateStr3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//表示时间日期的特定的字符串----Date---处理异常</span>\n        <span class="token class-name">Date</span> d <span class="token operator">=</span> fmt3<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2018年06月20日   10:10:10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="_6-3、calendar" tabindex="-1"><a class="header-anchor" href="#_6-3、calendar" aria-hidden="true">#</a> 6.3、<code>Calendar</code></h3><blockquote><p>单独获取当前日期和时间中的年月日和星期。</p><p>获取Calendar对象：<code>Calendar.getInstance()</code></p><p>常用字段：</p><ul><li><code>Calendar.YEAR</code>年份</li><li><code>Calendar.MONTH</code>月份，从0开始</li><li><code>Calendar.DATE</code>日期</li><li><code>Calendar.DAY_OF_MONTH</code>日期，和<code>Calendar.DATE</code>完全相同</li><li><code>Calendar.HOUR</code>12小时制的小时数</li><li><code>Calendar.HOUR_OF_DAY</code>24小时制的小时数</li><li><code>Calendar.MINUTE</code>分钟</li><li><code>Calendar.SECOND</code>秒</li><li><code>Calendar.DAY_OF_WEEK</code>星期几</li></ul><p>常用方法：</p><ul><li><code>set()</code></li><li><code>get()</code></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest5</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取日历----当前时间的日历</span>\n        <span class="token class-name">Calendar</span> cal <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;年份：&quot;</span> <span class="token operator">+</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//月份是从0开始的</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;月份：&quot;</span> <span class="token operator">+</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;日：&quot;</span> <span class="token operator">+</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;日：&quot;</span> <span class="token operator">+</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;时:&quot;</span> <span class="token operator">+</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//星期天是第一天</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;星期几：&quot;</span> <span class="token operator">+</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//获取特定时间的日历</span>\n        <span class="token class-name">Calendar</span> cal1 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        cal1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//12月</span>\n        cal1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        cal1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;星期几：&quot;</span> <span class="token operator">+</span> cal1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        cal1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;星期几：&quot;</span> <span class="token operator">+</span> cal1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><blockquote><p>打印万年历 <strong>要求</strong>：输入年，月，打印当月的万年历</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest6</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * 打印万年历\n         * \t要求：输入年，月，打印当月的万年历\n         * 关键问题\n         * \t1.这个月一共有几天\n         * \t\t|----平年闰年\n         * \t2.该月的第一天是周几\n         * \t3.换行\n         * \t\t|----计数器\n         * */</span>\n        <span class="token comment">//获取输入</span>\n        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入年:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> year <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入月:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> month <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * 每个月有几天\n         * 1 3 5 7 8 10 12---31\n         * 4 6 9 11---30\n         * 2---28 29\n         * */</span>\n        <span class="token keyword">int</span> days <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//这个月的总天数</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>\n                days <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>\n            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>\n                days <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//闰年</span>\n                    days <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    days <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//System.out.println(days);</span>\n        <span class="token comment">/*\n         * 判断该月的第一天是周几\n         * */</span>\n        <span class="token class-name">Calendar</span> cal <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//将日历对象设置成对应月份的第一天，月份从0开始，要减一</span>\n        cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> week <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//System.out.println(week);</span>\n\n        <span class="token comment">/*\n         * 打印万年历\n         * 1.1号之前的空格\n         * 2.换行--计数器---int count = 0;\n         * */</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;日\\t一\\t二\\t三\\t四\\t五\\t六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token comment">//打印空格</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> week<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            count<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//打印日期</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> days<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            count<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token comment">//每七天换一行</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><h3 id="_6-4、jdk8中新日期时间api" tabindex="-1"><a class="header-anchor" href="#_6-4、jdk8中新日期时间api" aria-hidden="true">#</a> 6.4、JDK8中新日期时间API</h3><h4 id="_6-4-1、概述" tabindex="-1"><a class="header-anchor" href="#_6-4-1、概述" aria-hidden="true">#</a> 6.4.1、概述</h4><blockquote><p>JDK 1.0中包含了 一个<code>java.util.Date</code>类，但是它的大多数方法已经在JDK 1.1引入<code>Calendar</code>类之后被弃用 了。而<code>Calendar</code>并不比<code>Date</code>好多少，它们面临的问题是：</p><ul><li>可变性：像日期和时间这样的类应该是不可变的；</li><li>偏移性：<code>Date</code>中的年份是从1900开始的，而月份都从0开始；</li><li>格式化：格式化只对<code>Date</code>有用，<code>Calendar</code>则不行；</li><li>此外，它们也不是线程安全的；不能处理闰秒等。</li></ul><p>对日期和时间的操作一直是Java程序员最痛苦的地方之一。</p><p>Java 8吸收了Joda-Time的精华，以一个新的开始为Java创建优秀的API。 新的<code>java.time</code>中包含了所有关于本地日期<code>LocalDate</code>、本地时间<code>LocalTime</code>、本地日期时间<code>LocalDateTime</code>、时区<code>ZonedDateTime</code> 和持续时间<code>Duration</code>的类。历史悠久的<code>Date</code>类新增了<code>toInstant()</code>方法， 用于把<code>Date</code>转换成新的表示形式。这些新增的本地化时间日期API大大简化了日期时间和本地化的管理。</p></blockquote><h4 id="_6-4-2、localdate、localtime、localdatetime" tabindex="-1"><a class="header-anchor" href="#_6-4-2、localdate、localtime、localdatetime" aria-hidden="true">#</a> 6.4.2、<code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code></h4><blockquote><p><code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>类是其中较重要的几个类，它们的<strong>实例是不可变的对象</strong>，分别表示使用ISO-8601日历系统的日期、时间、日期和时间。 它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</p><ul><li><code>LocalDate</code>代表IOS格式<code>yyyy-MM-dd</code>的日期,可以存储 生日、纪念日等日期；</li><li><code>LocalTime</code>表示一个时间，而不是日期；</li><li><code>LocalDateTime</code>是用来表示日期和时间的，这是一个最常用的类之一。</li></ul></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>now()/now(ZoneId zone)</code></td><td>静态方法，根据当前时间创建对象/指定时区的对象</td></tr><tr><td><code>of()</code></td><td>静态方法，根据指定日期/时间创建对象</td></tr><tr><td><code>getDayOfMonth()/getDayOfYear() </code></td><td>获得月份天数(1-31)/获得年份天数(1-366)</td></tr><tr><td><code>getDayOfWeek()</code></td><td>获得星期几(返回一个 DayOfWeek 枚举值)</td></tr><tr><td><code>getMonth()</code></td><td>获得月份, 返回一个 Month 枚举值</td></tr><tr><td><code>getMonthValue()/getYear()</code></td><td>获得月份(1-12)/获得年份</td></tr><tr><td><code>getHour()/getMinute()/getSecond()</code></td><td>获得当前对象对应的小时、分钟、秒</td></tr><tr><td><code>withDayOfMonth()/withDayOfYear()/ withMonth()/withYear()</code></td><td>将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</td></tr><tr><td><code>plusDays()/plusWeeks()/plusMonths()/plusYears()/plusHours()</code></td><td>向当前对象添加几天、几周、几个月、几年、几小时</td></tr><tr><td><code>minusMonths()/minusWeeks()/minusDays()/minusYears()/minusHours()</code></td><td>从当前对象减去几月、几周、几天、几年、几小时</td></tr></tbody></table><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest21</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//now():获取当前的日期、时间、日期+时间</span>\n        <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span>\n        <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n        <span class="token comment">//getXxx()：获取相关的属性</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//体现不可变性</span>\n        <span class="token comment">//withXxx():设置相关的属性</span>\n        <span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n        <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//不可变性</span>\n        <span class="token class-name">LocalDateTime</span> localDateTime3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">LocalDateTime</span> localDateTime4 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h4 id="_6-4-3、instant" tabindex="-1"><a class="header-anchor" href="#_6-4-3、instant" aria-hidden="true">#</a> 6.4.3、<code>Instant</code></h4><blockquote><p><code>Instant</code>：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。</p><p>在处理时间和日期的时候，我们通常会想到年、月、日、时、分、秒。然而，这只是时间的一个模型，是面向人类的。第二种通用模型是面向机器的，或者说是连续的。在此模型中，时间线中的一个点表示为一个很大的数，这有利于计算机处理。在UNIX中，这个数从1970年开始，以秒为的单位；同样的，在Java中， 也是从1970年开始，但以毫秒为单位。</p><p><code>java.time</code>包通过值类型<code>Instant</code>提供机器视图，不提供处理人类意义上的时间 单位。<code>Instant</code>表示时间线上的一点，而不需要任何上下文信息，例如，时区。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。因为<code>java.time</code>包是基于纳秒计算的，所以<code>Instant</code>的精度可以达到纳秒级。</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>now()</code></td><td>静态方法，返回默认UTC时区的<code>Instant</code>类的对象</td></tr><tr><td><code>ofEpochMilli(long epochMilli)</code></td><td>静态方法，返回在<code>1970-01-01 00:00:00</code>基础上加上指定毫秒数之后的<code>Instant</code>类的对象</td></tr><tr><td><code>atOffset(ZoneOffset offset) </code></td><td>结合即时的偏移来创建一个<code>OffsetDateTime</code></td></tr><tr><td><code>toEpochMilli() </code></td><td>返回<code>1970-01-01 00:00:00</code>到当前时间的毫秒数，即为时间戳</td></tr></tbody></table><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest22</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取本初子午线对应的标准时间</span>\n        <span class="token class-name">Instant</span> now <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">//取自1970年1月1日0时0分0秒（UTC）开始秒数</span>\n        <span class="token keyword">long</span> epochSecond <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>epochSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">//通过给定的秒数，获取Instant实例</span>\n        <span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">1641611354L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//将Instant转换成LocalDateTime</span>\n        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//将LocalDateTime转换成Instant</span>\n        <span class="token class-name">Instant</span> instant1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="_6-4-4、格式化与解析日期或时间" tabindex="-1"><a class="header-anchor" href="#_6-4-4、格式化与解析日期或时间" aria-hidden="true">#</a> 6.4.4、格式化与解析日期或时间</h4><blockquote><p><code>DateTimeFormatter</code>提供了三种格式化方法：</p><ul><li>预定义的标准格式</li><li>自定义的格式</li><li>本地化相关的格式</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span></span><span class="token class-name">TemporalAccessor</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest23</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//将日期时间格式化为特定格式字符串</span>\n        <span class="token class-name">String</span> s1 <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>BASIC_ISO_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20220108</span>\n        <span class="token class-name">String</span> s2 <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_DATE_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2022-01-08T11:36:49.302</span>\n\n        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> s3 <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2022年01月07日 05:38:17</span>\n\n        <span class="token class-name">DateTimeFormatter</span> formatter1 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日 hh:mm:ss a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> s4 <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2022年01月07日 05:38:17 上午</span>\n\n        <span class="token comment">//将特定格式的字符串转化为日期时间对象</span>\n        <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2021-05-10T11:43:14.875&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2021-05-10T11:43:14.875</span>\n        <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2022年01月08日 11:44:03&quot;</span><span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2022-01-08T11:44:03</span>\n\n\n        <span class="token class-name">DateTimeFormatter</span> formatter2 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//将日期时间格式化为特定格式字符串</span>\n        <span class="token class-name">String</span> s5 <span class="token operator">=</span> formatter2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2022年01月07日 05:38:17</span>\n\n        <span class="token class-name">TemporalAccessor</span> parse <span class="token operator">=</span> formatter2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2022年01月07日 05:38:17&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//将特定格式的字符串转化为日期时间对象</span>\n        <span class="token class-name">LocalDateTime</span> localDateTime3 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2022-01-07T05:38:17</span>\n       \t<span class="token comment">//本地化相关转换</span>\n        <span class="token class-name">DateTimeFormatter</span> formatter3 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div>',106),o={},c=(0,a(83744).Z)(o,[["render",function(n,s){return e}]])}}]);