"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[3985],{32707:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-66e72a76",path:"/framework/vue/01_ECMAScript6%E5%85%A5%E9%97%A8.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、ECMAScript6简介",slug:"一、ecmascript6简介",children:[{level:3,title:"1.1、ECMAScript 和 JavaScript 的关系",slug:"_1-1、ecmascript-和-javascript-的关系",children:[]},{level:3,title:"1.2、ES6 与 ECMAScript 2015 的关系",slug:"_1-2、es6-与-ecmascript-2015-的关系",children:[]}]},{level:2,title:"二、基本语法",slug:"二、基本语法",children:[{level:3,title:"2.1、let变量声明",slug:"_2-1、let变量声明",children:[]},{level:3,title:"2.2、const常量声明",slug:"_2-2、const常量声明",children:[]},{level:3,title:"2.3、解构赋值",slug:"_2-3、解构赋值",children:[]},{level:3,title:"2.4、模板字符串",slug:"_2-4、模板字符串",children:[]},{level:3,title:"2.5、声明对象简写",slug:"_2-5、声明对象简写",children:[]},{level:3,title:"2.6、定义方法简写",slug:"_2-6、定义方法简写",children:[]},{level:3,title:"2.7、对象拓展运算符",slug:"_2-7、对象拓展运算符",children:[]},{level:3,title:"2.8、箭头函数",slug:"_2-8、箭头函数",children:[]}]}],filePathRelative:"framework/vue/01_ECMAScript6入门.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},3794:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h2 id="一、ecmascript6简介" tabindex="-1"><a class="header-anchor" href="#一、ecmascript6简介" aria-hidden="true">#</a> 一、ECMAScript6简介</h2><blockquote><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p></blockquote><h3 id="_1-1、ecmascript-和-javascript-的关系" tabindex="-1"><a class="header-anchor" href="#_1-1、ecmascript-和-javascript-的关系" aria-hidden="true">#</a> 1.1、ECMAScript 和 JavaScript 的关系</h3><blockquote><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规范，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）。</p></blockquote><h3 id="_1-2、es6-与-ecmascript-2015-的关系" tabindex="-1"><a class="header-anchor" href="#_1-2、es6-与-ecmascript-2015-的关系" aria-hidden="true">#</a> 1.2、ES6 与 ECMAScript 2015 的关系</h3><blockquote><p>ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？</p><p>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。</p><p>ES6 的第一个版本，在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）。</p><p>2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p><p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本教程中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p></blockquote><h2 id="二、基本语法" tabindex="-1"><a class="header-anchor" href="#二、基本语法" aria-hidden="true">#</a> 二、基本语法</h2><blockquote><p>ES标准中不包含 DOM 和 BOM的定义，只涵盖基本数据类型、关键字、语句、运算符、内建对象、内建函数等通用语法。</p><p><strong>本部分只学习前端开发中ES6的最少必要知识</strong>，方便后面开发中对代码的理解。</p></blockquote><h3 id="_2-1、let变量声明" tabindex="-1"><a class="header-anchor" href="#_2-1、let变量声明" aria-hidden="true">#</a> 2.1、let变量声明</h3><blockquote><p><code>var</code>声明的变量，没有局部作用域 <code>let</code>声明的变量 ，有局部作用域</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span>\n\t<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">// ReferenceError: b is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p><code>var</code>可以声明多次 <code>let</code>只能声明一次</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">4</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">// 2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment">// Identifier &#39;n&#39; has already been declared</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-2、const常量声明" tabindex="-1"><a class="header-anchor" href="#_2-2、const常量声明" aria-hidden="true">#</a> 2.2、const常量声明</h3><blockquote><p>声明之后不允许改变</p><p>一但声明必须初始化，否则会报错</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1、声明之后不允许改变    </span>\n<span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token string">&quot;3.1415&quot;</span>\n<span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment">// TypeError: Assignment to constant variable.</span>\n\n<span class="token comment">// 2、一但声明必须初始化，否则会报错</span>\n<span class="token keyword">const</span> <span class="token constant">MY_AGE</span>  <span class="token comment">// SyntaxError: Missing initializer in const declaration</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-3、解构赋值" tabindex="-1"><a class="header-anchor" href="#_2-3、解构赋值" aria-hidden="true">#</a> 2.3、解构赋值</h3><blockquote><p>解构赋值是对赋值运算符的扩展。</p><p>他是一种针对<strong>数组或者对象</strong>进行模式匹配，然后对其中的变量进行赋值。</p><p>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//1、数组解构</span>\n<span class="token comment">// 传统</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">36</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n\n<span class="token comment">// ES6</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>\n\n<span class="token comment">//2、对象解构</span>\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Peter&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">}</span>\n<span class="token comment">// 传统</span>\n<span class="token keyword">let</span> n <span class="token operator">=</span> user<span class="token punctuation">.</span>name\n<span class="token keyword">let</span> a <span class="token operator">=</span> user<span class="token punctuation">.</span>age\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span>\n<span class="token comment">// ES6</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span>  user<span class="token comment">//注意：结构的变量必须是user中的属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_2-4、模板字符串" tabindex="-1"><a class="header-anchor" href="#_2-4、模板字符串" aria-hidden="true">#</a> 2.4、模板字符串</h3><blockquote><p>模板字符串相当于加强版的字符串，用反引号“`”，除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1、多行字符串</span>\n<span class="token keyword">let</span> string1 <span class="token operator">=</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hey,\ncan you stop angry now?</span><span class="token template-punctuation string">`</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span>\n<span class="token comment">// Hey,</span>\n<span class="token comment">// can you stop angry now?</span>\n\n<span class="token comment">// 2、字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span>\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">21</span>\n<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My Name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next year.</span><span class="token template-punctuation string">`</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>\n<span class="token comment">// My Name is Tom,I am 21 years old next year.</span>\n\n\n<span class="token comment">// 3、字符串中调用函数</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;have fun!&quot;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Game start,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Game start,have fun!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_2-5、声明对象简写" tabindex="-1"><a class="header-anchor" href="#_2-5、声明对象简写" aria-hidden="true">#</a> 2.5、声明对象简写</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span>\n\n<span class="token comment">// 传统</span>\n<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>\n\n<span class="token comment">// ES6</span>\n<span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">,</span> name<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">//{age: 20, name: &quot;Tom&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-6、定义方法简写" tabindex="-1"><a class="header-anchor" href="#_2-6、定义方法简写" aria-hidden="true">#</a> 2.6、定义方法简写</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 传统</span>\n<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">sayHi</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nperson1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;Hi&quot;</span>\n<span class="token comment">// ES6</span>\n<span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nperson2<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//&quot;Hi&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2-7、对象拓展运算符" tabindex="-1"><a class="header-anchor" href="#_2-7、对象拓展运算符" aria-hidden="true">#</a> 2.7、对象拓展运算符</h3><blockquote><p>拓展运算符<code>...</code>用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1、拷贝对象</span>\n<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Amy&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> someone <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>person1 <span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someone<span class="token punctuation">)</span>  <span class="token comment">//{name: &quot;Amy&quot;, age: 15}</span>\n\n<span class="token comment">// 2、合并对象</span>\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Amy&quot;</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>age<span class="token punctuation">,</span> <span class="token operator">...</span>name<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>  <span class="token comment">//{age: 15, name: &quot;Amy&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-8、箭头函数" tabindex="-1"><a class="header-anchor" href="#_2-8、箭头函数" aria-hidden="true">#</a> 2.8、箭头函数</h3><blockquote><p>箭头函数提供了一种更加简洁的函数书写方式，类似Java8的Lambda表达式。基本语法是：</p><p><code>参数 =&gt; 函数体</code></p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//传统</span>\n<span class="token keyword">var</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ES6</span>\n<span class="token keyword">var</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> a\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 当箭头函数没有参数或者有多个参数，要用 () 括起来。</span>\n<span class="token comment">// 当箭头函数函数体有多行语句，用 {} 包裹起来，表示代码块，</span>\n<span class="token comment">// 当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。</span>\n<span class="token keyword">var</span> <span class="token function-variable function">f3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> a<span class="token operator">+</span>b\n    <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 8</span>\n<span class="token comment">// 前面代码相当于：</span>\n<span class="token keyword">var</span> <span class="token function-variable function">f4</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">+</span>b\n\n<span class="token comment">//定义函数</span>\n<span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//使用箭头函数</span>\n<span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//let r = test1(10, function (a) {</span>\n<span class="token comment">//    return a * a;</span>\n<span class="token comment">//})</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//使用箭头函数</span>\n<span class="token keyword">let</span> r1 <span class="token operator">=</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//let r1 = test1(11, function (a){</span>\n<span class="token comment">//    return a + 100;</span>\n<span class="token comment">//});</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><blockquote><p>箭头函数多用于匿名函数的定义。</p></blockquote>',33),e={},t=(0,a(83744).Z)(e,[["render",function(n,s){return p}]])}}]);