"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[9648],{32940:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0fe269b8",path:"/sql/mysql/09_TPL.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、准备工作",slug:"一、准备工作",children:[]},{level:2,title:"二、关于事务",slug:"二、关于事务",children:[{level:3,title:"2.1、什么是事务",slug:"_2-1、什么是事务",children:[]},{level:3,title:"2.2、MySQL中处理事务",slug:"_2-2、mysql中处理事务",children:[]},{level:3,title:"2.3、事务原理",slug:"_2-3、事务原理",children:[]},{level:3,title:"2.4、事务特性",slug:"_2-4、事务特性",children:[]},{level:3,title:"2.5、事务隔离级别",slug:"_2-5、事务隔离级别",children:[]}]}],filePathRelative:"sql/mysql/09_TPL.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},68128:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(66252).uE)('<h2 id="一、准备工作" tabindex="-1"><a class="header-anchor" href="#一、准备工作" aria-hidden="true">#</a> 一、准备工作</h2><blockquote><p>建库建表</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> mydb2<span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mydb2<span class="token punctuation">;</span>\n\n<span class="token keyword">USE</span> mydb2<span class="token punctuation">;</span>\n\n\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> account<span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account  <span class="token punctuation">(</span>\n  id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  cardnum <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  money <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;10002&#39;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>生活当中转账是转账方账户扣钱，收账方账户加钱。我们用数据库操作来模拟现实转账</p><p>使用SQL语句模拟上述操作</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># A账户转账给B账户1000元</span>\n<span class="token comment"># A账户减1000元</span>\n<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">1000</span> <span class="token keyword">WHERE</span> cardnum<span class="token operator">=</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment"># B账户加1000元</span>\n<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">1000</span> <span class="token keyword">WHERE</span> cardnum<span class="token operator">=</span><span class="token string">&#39;10002&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>模拟转账错误</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># A账户转账给B账户1000元</span>\n<span class="token comment"># A账户减1000元</span>\n<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">1000</span> <span class="token keyword">WHERE</span> cardnum<span class="token operator">=</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">;</span>\n<span class="token comment"># 中间出现错误 断电、异常、出错...</span>\n\n<span class="token comment"># B账户加1000元</span>\n<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">1000</span> <span class="token keyword">WHERE</span> cardnum<span class="token operator">=</span><span class="token string">&#39;10002&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>上述代码在减操作后过程中出现了异常或加钱语句出错，会发现，减钱仍旧是成功的，而加钱失败了！</p><p>注意：每条 SQL 语句都是一个独立的操作，一个操作执行完对数据库是永久性的影响。</p><p>上面的情形是不能容忍的，我们希望类似转账这种操作涉及到的多步操作要么全部成功，要么全部失败。</p></blockquote><h2 id="二、关于事务" tabindex="-1"><a class="header-anchor" href="#二、关于事务" aria-hidden="true">#</a> 二、关于事务</h2><h3 id="_2-1、什么是事务" tabindex="-1"><a class="header-anchor" href="#_2-1、什么是事务" aria-hidden="true">#</a> 2.1、什么是事务</h3><blockquote><p>一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</p><p>事务要处理的问题，把多个对数据库的操作绑定成一个事务，<strong>要么都成功，要么都失败</strong>。</p></blockquote><h3 id="_2-2、mysql中处理事务" tabindex="-1"><a class="header-anchor" href="#_2-2、mysql中处理事务" aria-hidden="true">#</a> 2.2、MySQL中处理事务</h3><blockquote><p>MySQL中处理事务涉及三个操作：</p><ul><li>开启事务</li><li>提交事务</li><li>回滚</li></ul></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 开启事务</span>\n<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 多个SQL操作</span>\n\n<span class="token comment"># 提交事务</span>\n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n<span class="token comment"># 回滚</span>\n<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>在执行SQL语句之前，先执行START TRANSACTION，这就开启了一个事务（事务的起点），然后可以去执行多条SQL语句;</p><p>后要结束事务，COMMIT表示提交，即事务中的多条SQL语句所做出的影响会持久化到数据库中，或者ROLLBACK，表示回滚，即回滚到事务的起点，之前做的所有操作都被撤消了；</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 开启事务</span>\n<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 多个SQL操作</span>\n<span class="token comment"># A账户转账给B账户1000元</span>\n<span class="token comment"># A账户减1000元</span>\n<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">1000</span> <span class="token keyword">WHERE</span> cardnum<span class="token operator">=</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">;</span>\n<span class="token comment"># B账户加1000元</span>\n<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">1000</span> <span class="token keyword">WHERE</span> cardnum<span class="token operator">=</span><span class="token string">&#39;10002&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 提交事务</span>\n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n<span class="token comment"># 回滚</span>\n<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2-3、事务原理" tabindex="-1"><a class="header-anchor" href="#_2-3、事务原理" aria-hidden="true">#</a> 2.3、事务原理</h3><blockquote><p>数据库会为每一个客户端都维护一个空间独立的缓存区(回滚段)，一个事务中所有的增删改语句的执行结果都会缓存在回滚段中，只有当事务中所有SQL语句均正常结束（COMMIT），才会将回滚段中的数据同步到数据库。否则无论因为哪种原因失败，整个事务将回滚（ROLLBACK）。</p></blockquote><h3 id="_2-4、事务特性" tabindex="-1"><a class="header-anchor" href="#_2-4、事务特性" aria-hidden="true">#</a> 2.4、事务特性</h3><blockquote><p><strong>原子性（Atomicity）</strong>：事务中所有操作作为一个整体，是<strong>不可再分割</strong>的原子单位。事务中所有操作要么全部执行成功，要么全部执行失败。</p><p><strong>一致性（Consistency）</strong>：事务执行后，数据库状态与其它业务规则保持一致。如转账业务，无论事务执行成功与否，参与转账的两个账号余额之和应该是不变的。</p><p><strong>隔离性（Isolation）</strong>：隔离性是指在并发操作中，不同事务之间应该隔离开来，使每个并发中的事务不会相互干扰。</p><p><strong>持久性（Durability）</strong>：一旦事务提交成功，事务中所有的数据操作都必须被持久化到数据库中，即使提交事务后，数据库马上崩溃，在数据库重启时，也必须能保证通过某种机制恢复数据。</p></blockquote><h3 id="_2-5、事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_2-5、事务隔离级别" aria-hidden="true">#</a> 2.5、事务隔离级别</h3><h4 id="_2-5-1、事务并发读问题" tabindex="-1"><a class="header-anchor" href="#_2-5-1、事务并发读问题" aria-hidden="true">#</a> 2.5.1、事务并发读问题</h4><blockquote><p>在现代关系型数据库中，事务机制是非常重要的，假如在多个事务并发操作数据库时，如果没有有效的机制进行避免就会导致出现<strong>脏读，不可重复读，幻读</strong>。</p><p><strong>脏读</strong>：</p><ul><li>在事务A执行过程中，事务A对数据资源进行了修改，事务B读取了事务A修改后的数据；</li><li>由于某些原因，事务A并没有完成提交，发生了回滚操作，则事务B读取的数据就是脏数据。</li><li>这种读取到另一个事务未提交的数据的现象就是脏读。</li></ul><table><thead><tr><th>时间点</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>开启事务</td><td></td></tr><tr><td>2</td><td></td><td>开启事务</td></tr><tr><td>3</td><td>修改（update）数据</td><td></td></tr><tr><td>4</td><td></td><td>查询（select）数据</td></tr><tr><td>5</td><td>回滚</td><td></td></tr></tbody></table><p><strong>不可重复读</strong>：</p><ul><li>事务B读取了两次数据资源，在这两次读取的过程中事务A修改了数据，导致事务B在这两次读取出来的数据不一致；</li><li>这种在同一个事务中，前后两次读取的数据不一致的现象就是不可重复读。</li></ul><table><thead><tr><th>时间点</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>开启事务</td><td></td></tr><tr><td>2</td><td></td><td>开启事务</td></tr><tr><td>3</td><td></td><td>查询（select）数据</td></tr><tr><td>4</td><td>修改（update）数据</td><td></td></tr><tr><td>5</td><td>提交</td><td></td></tr><tr><td>6</td><td></td><td>查询（select）数据</td></tr></tbody></table><p><strong>幻读</strong>：</p><ul><li>幻读是针对数据**插入（INSERT）**操作来说的。</li><li>事务A查询某条数据不存在，事务B插入该条数据并提交；</li><li>A再次查询该数据仍然不存在，但是无法插入成功，让用户感觉很魔幻，感觉出现了幻觉，这就叫幻读。</li></ul><table><thead><tr><th>时间点</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>开启事务</td><td></td></tr><tr><td>2</td><td>查询（select）数据</td><td></td></tr><tr><td>3</td><td></td><td>开启事务</td></tr><tr><td>4</td><td></td><td>插入（insert）数据</td></tr><tr><td>5</td><td></td><td>提交</td></tr><tr><td>6</td><td>查询（select）数据，数据不存在</td><td></td></tr><tr><td>7</td><td>插入（insert）相同主键数据，不成功</td><td></td></tr><tr><td>8</td><td></td><td>查询（select）数据</td></tr></tbody></table></blockquote><h4 id="_2-5-2、四大隔离级别简介" tabindex="-1"><a class="header-anchor" href="#_2-5-2、四大隔离级别简介" aria-hidden="true">#</a> 2.5.2、四大隔离级别简介</h4><blockquote><p>为了解决以上的问题，主流的关系型数据库都会提供四种事务的隔离级别。事务隔离级别从低到高分别是：</p><ul><li>读未提交(READ UNCOMMITTED)</li><li>读已提交(READ COMMITTED)</li><li>可重复读(REPEATABLE READ)</li><li>串行化(SERIALIZABLE)</li></ul><p>事务隔离级别等级越高，越能保证数据的一致性和完整性，但是执行效率也越低。所以在设置数据库的事务隔离级别时需要做一下权衡，<strong>MySQL默认是可重复读（REPEATABLE READ）的级别</strong>。</p><p>下表展示了四种隔离级别对并发读问题的解决程度。</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交(READ UNCOMMITTED)</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>读已提交(READ COMMITTED)</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读(REPEATABLE READ)</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>串行化(SERIALIZABLE)</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table></blockquote><h4 id="_2-5-3、隔离级别常见操作" tabindex="-1"><a class="header-anchor" href="#_2-5-3、隔离级别常见操作" aria-hidden="true">#</a> 2.5.3、隔离级别常见操作</h4><blockquote><p>查看事务隔离级别</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span>\n<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;tx_isolation&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>修改隔离级别</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token punctuation">[</span>作用域<span class="token punctuation">]</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token punctuation">[</span>事务隔离级别<span class="token punctuation">]</span>\n<span class="token comment"># 作用域可以是SESSION或GLOBAL，SESSION只针对当前回话窗口，GLOBAL是全局的</span>\n<span class="token comment"># 隔离级别是read uncommitted、read committed、repeatable read、serializable这四种，不区分大小写</span>\n<span class="token keyword">set</span> <span class="token punctuation">[</span><span class="token keyword">session</span> <span class="token operator">|</span> <span class="token keyword">global</span><span class="token punctuation">]</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> {<span class="token keyword">read</span> <span class="token keyword">uncommitted</span> <span class="token operator">|</span> <span class="token keyword">read</span> <span class="token keyword">committed</span> <span class="token operator">|</span> <span class="token keyword">repeatable</span> <span class="token keyword">read</span> <span class="token operator">|</span> <span class="token keyword">serializable</span>}\n\n<span class="token comment"># 案例，设置全局隔离级别为read uncommitted</span>\n<span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p><strong>设置全局隔离级别完成后，只对之后新起的SESSION才起作用，对已经启动SESSION无效。如果用Shell客户端那就要重新连接MySQL，如果用Navicat那就要创建新的查询窗口。</strong></p></blockquote><h4 id="_2-5-4、隔离级别演示" tabindex="-1"><a class="header-anchor" href="#_2-5-4、隔离级别演示" aria-hidden="true">#</a> 2.5.4、隔离级别演示</h4><blockquote><p>准备工作</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">USE</span> mydb2<span class="token punctuation">;</span>\n\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tb_test<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tb_test<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>num<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_test<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_test<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_test<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="_2-5-4-1、读未提交-read-uncommitted" tabindex="-1"><a class="header-anchor" href="#_2-5-4-1、读未提交-read-uncommitted" aria-hidden="true">#</a> 2.5.4.1、读未提交(READ UNCOMMITTED)</h5><blockquote><p>任何事务对数据的修改都会第一时间暴露给其他事务，即使事务还没有提交。</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 设置隔离级别为read uncommitted</span>\n<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span>；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>重新启动两个窗口连接MySQL，分别代表A、B两个事务。两个事务分别用A、B代替。</p><p>A：启动事务，此时数据为初始状态</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select @@tx_isolation;\n+------------------+\n| @@tx_isolation   |\n+------------------+\n| READ-UNCOMMITTED |\n+------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql&gt; start transaction;\nQuery OK, 0 rows affected (0.00 sec)\nmysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>B：启动事务，更新数据，但不提交</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; update tb_test set num=10 where id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |   10 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>A：再次读取数据，发现数据已经被修改了，这就是所谓的“脏读”</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |   10 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>B：回滚事务</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; rollback;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>A：再次读数据，发现数据变回初始状态</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>经过上面的实验可以得出结论，事务B更新了一条记录，但是没有提交，此时事务A可以查询出未提交记录。造成脏读现象。读未提交(READ UNCOMMITTED)是最低的隔离级别。</p></blockquote><h5 id="_2-5-4-2、读已提交-read-committed" tabindex="-1"><a class="header-anchor" href="#_2-5-4-2、读已提交-read-committed" aria-hidden="true">#</a> 2.5.4.2、读已提交(READ COMMITTED)</h5><blockquote><p>既然读未提交没办法解决脏数据问题，那么就有了读提交。读提交就是一个事务只能读到其他事务已经提交过的数据，也就是其他事务调用commit命令之后的数据。那脏数据问题迎刃而解了。</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 设置隔离级别为read committed</span>\n<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>A：启动事务，此时数据为初始状态</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select @@tx_isolation;\n+------------------+\n| @@tx_isolation   |\n+------------------+\n| READ-UNCOMMITTED |\n+------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql&gt; start transaction;\nQuery OK, 0 rows affected (0.00 sec)\nmysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>B：启动事务，更新数据，但不提交</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; update tb_test set num=10 where id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |   10 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>A：再次读取数据，发现还是之前不去到的数据，说明在读已提交(READ COMMITTED)级别下解决了脏读的问题</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>B：提交</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; commit;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>A：再次读取数据，发现数据已经被修改了</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |   10 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>这就出现了一个问题，在同一事务中(本例中的事务A)，事务的不同时刻同样的查询条件，查询出来的记录内容是不一样的，事务B的提交影响了事务A的查询结果，这就是不可重复读，也就是读已提交隔离级别。</p><p>每个SELECT语句都有自己的一份快照，而不是一个事务一份，所以在不同的时刻，查询出来的数据可能是不一致的。</p><p>读已提交解决了脏读的问题，但是无法做到可重复读。</p></blockquote><h5 id="_2-5-4-3、可重复读-repeatable-read" tabindex="-1"><a class="header-anchor" href="#_2-5-4-3、可重复读-repeatable-read" aria-hidden="true">#</a> 2.5.4.3、可重复读(REPEATABLE READ)</h5><blockquote><p>可重复是对比不可重复而言的，上面说不可重复读是指同一事务不同时刻读到的数据值可能不一致。而可重复读是指，事务不会读到其他事务对已有数据的修改，及时其他事务已提交，也就是说，事务开始时读到的已有数据是什么，在事务提交前的任意时刻，这些数据的值都是一样的。但是，对于其他事务新插入的数据是读取不到，也无法插入相同的数据，这也就引发了幻读问题。</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 设置隔离级别为repeatable read</span>\n<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">repeatable</span> <span class="token keyword">read</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>A：启动事务，此时数据为初始状态</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select @@tx_isolation;\n+------------------+\n| @@tx_isolation   |\n+------------------+\n| REPEATABLE-READ |\n+------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql&gt; start transaction;\nQuery OK, 0 rows affected (0.00 sec)\nmysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>B：开启事务，修改数据并提交</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; update tb_test set num=10 where id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; commit;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>A：查询数据，发现和之前的查询结果相同。</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>以上可以看到，可重复读(REPEATABLE READ)隔离级别解决了不可重复读问题，但是目前存在幻读的问题。</p><p>将数据库表恢复成之前的状态，分别开启两个事务。</p><p>A：启动事务，此时数据为初始状态</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select @@tx_isolation;\n+------------------+\n| @@tx_isolation   |\n+------------------+\n|  REPEATABLE-READ |\n+------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql&gt; start transaction;\nQuery OK, 0 rows affected (0.00 sec)\nmysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>B：开启事务，添加数据，提交</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into tb_test(num) values(4);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; commit;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>A：查询，看不到新添加的数据，插入主键为4的数据，失败</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mysql&gt; select * from tb_test;\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n3 rows in set (0.00 sec)\n\nmysql&gt; insert into tb_test(id, num) values(4,4);\nERROR 1062 (23000): Duplicate entry &#39;4&#39; for key &#39;PRIMARY&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="_2-5-4-4、串行化-serializable" tabindex="-1"><a class="header-anchor" href="#_2-5-4-4、串行化-serializable" aria-hidden="true">#</a> 2.5.4.4、串行化(SERIALIZABLE)</h5><blockquote><p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。这种隔离级别很少使用</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 设置全局隔离级别为serializable</span>\n<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">serializable</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',80),p={},t=(0,a(83744).Z)(p,[["render",function(n,s){return e}]])}}]);