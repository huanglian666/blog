"use strict";(self.webpackChunkhuanglian=self.webpackChunkhuanglian||[]).push([[9540],{4834:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-5d620342",path:"/tool/git/Git.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一：Git简介",slug:"一-git简介",children:[{level:3,title:"1.1：项目版本管理",slug:"_1-1-项目版本管理",children:[]},{level:3,title:"1.2：多人协同开发",slug:"_1-2-多人协同开发",children:[]}]},{level:2,title:"二：Git安装",slug:"二-git安装",children:[{level:3,title:"3.1：下载",slug:"_3-1-下载",children:[]},{level:3,title:"3.2：安装",slug:"_3-2-安装",children:[]},{level:3,title:"3.3：全局配置",slug:"_3-3-全局配置",children:[]}]},{level:2,title:"三：Git架构",slug:"三-git架构",children:[]},{level:2,title:"四：Git基本操作",slug:"四-git基本操作",children:[]},{level:2,title:"五：Git远程仓库",slug:"五-git远程仓库",children:[{level:3,title:"5.1：远程仓库选择",slug:"_5-1-远程仓库选择",children:[]},{level:3,title:"5.2：在码云上创建远程仓库",slug:"_5-2-在码云上创建远程仓库",children:[]},{level:3,title:"5.3：远程仓库操作",slug:"_5-3-远程仓库操作",children:[]},{level:3,title:"window缓存gitee的账户(密码写错修改措施)",slug:"window缓存gitee的账户-密码写错修改措施",children:[]}]},{level:2,title:"六：Git分支",slug:"六-git分支",children:[]},{level:2,title:"七：Idea中使用Git",slug:"七-idea中使用git",children:[{level:3,title:"十、多人协同开发",slug:"十、多人协同开发",children:[]}]}],filePathRelative:"tool/git/Git.md",git:{updatedTime:1661237516e3,contributors:[{name:"黄健",email:"huang.jian@trs.com.cn",commits:1}]}}},51534:(a,n,s)=>{s.r(n),s.d(n,{default:()=>ea});var e=s(66252);const t=s.p+"assets/img/image-20201206093056733.cad9e424.png",i=s.p+"assets/img/image-20201210094959229.caaa3e2d.png",p=s.p+"assets/img/image-20201210103151790.8e8ef244.png",r=s.p+"assets/img/image-20201210103801584.fa065217.png",l=s.p+"assets/img/image-20201210103836177.e823a247.png",c=s.p+"assets/img/image-20201210110408191.8c44e8c3.png",o=s.p+"assets/img/image-20201210110557828.70931694.png",m=s.p+"assets/img/image-20201210110847724.e881cc6c.png",b=s.p+"assets/img/image-20201210111023441.2f06ed80.png",d=s.p+"assets/img/image-20201210111205850.9cf57565.png",u=s.p+"assets/img/image-20201210111408726.d6c15fdf.png",g=s.p+"assets/img/image-20201210111732097.ee0500d5.png",h=s.p+"assets/img/image-20201210112015995.3bfbcd76.png",k=s.p+"assets/img/image-20201210112518250.36949072.png",f=s.p+"assets/img/image-20201210141241104.05f951de.png",q=s.p+"assets/img/image-20201210141551763.d0855cdc.png",_=s.p+"assets/img/image-20201210141716015.2eb0d6bc.png",x=s.p+"assets/img/image-20201210142217376.b4a9a3da.png",M=s.p+"assets/img/image-20201206140807945.5196e41c.png",y=s.p+"assets/img/image-20201210143248193.dce6ab6b.png",G=s.p+"assets/img/image-20201210152626284.add4a5e1.png",v=s.p+"assets/img/image-20201210155857448.86071483.png",N=s.p+"assets/img/image-20201210170722995.ab89dee5.png",A=s.p+"assets/img/image-20201211091826004.84fa2f6d.png",I=s.p+"assets/img/image-20201211092127617.a578ffe3.png",w=s.p+"assets/img/image-20201211092222756.fb442ce2.png",W=s.p+"assets/img/image-20201211092646040.a8d47e43.png",J=s.p+"assets/img/image-20201211092807773.1523f773.png",T=s.p+"assets/img/image-20201211093243769.a015449c.png",B=s.p+"assets/img/image-20201211094639303.29c12b77.png",$=s.p+"assets/img/image-20201211094435008.f6cdb5ef.png",E=s.p+"assets/img/image-20201211094549389.dbf6e4d1.png",j=s.p+"assets/img/image-20201211095245097.b77b70cc.png",D=s.p+"assets/img/image-20201211095401693.36f6c514.png",H=s.p+"assets/img/image-20201211105534959.df37d193.png",U=s.p+"assets/img/image-20201211105719937.44572355.png",z=s.p+"assets/img/保护分支1.7315209a.jpg",C=s.p+"assets/img/保护分支2.33b4ddfc.jpg",O=(0,e.uE)('<h2 id="一-git简介" tabindex="-1"><a class="header-anchor" href="#一-git简介" aria-hidden="true">#</a> 一：Git简介</h2><p>官网：https://git-scm.com/</p><p><img src="'+t+'" alt="image-20201206093056733"></p><blockquote><p>git是<code>项目版本管理</code>与<code>多人协同开发</code>一个工具</p></blockquote><h3 id="_1-1-项目版本管理" tabindex="-1"><a class="header-anchor" href="#_1-1-项目版本管理" aria-hidden="true">#</a> 1.1：项目版本管理</h3><p><img src="'+i+'" alt="image-20201210094959229"></p><h3 id="_1-2-多人协同开发" tabindex="-1"><a class="header-anchor" href="#_1-2-多人协同开发" aria-hidden="true">#</a> 1.2：多人协同开发</h3><blockquote><p>一个团队开发一个项目</p></blockquote><p><img src="'+p+'" alt="image-20201210103151790"></p><h2 id="二-git安装" tabindex="-1"><a class="header-anchor" href="#二-git安装" aria-hidden="true">#</a> 二：Git安装</h2><h3 id="_3-1-下载" tabindex="-1"><a class="header-anchor" href="#_3-1-下载" aria-hidden="true">#</a> 3.1：下载</h3>',11),Y=(0,e.Uk)("下载地址："),P={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},L=(0,e.Uk)("https://git-scm.com/downloads"),R=(0,e.uE)('<h3 id="_3-2-安装" tabindex="-1"><a class="header-anchor" href="#_3-2-安装" aria-hidden="true">#</a> 3.2：安装</h3><blockquote><p>指定一个安装目录，然后一路Next即可</p></blockquote><p><img src="'+r+'" alt="image-20201210103801584"></p><p><img src="'+l+'" alt="image-20201210103836177"></p><h3 id="_3-3-全局配置" tabindex="-1"><a class="header-anchor" href="#_3-3-全局配置" aria-hidden="true">#</a> 3.3：全局配置</h3><blockquote><p>自报家门</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config --global user.name <span class="token string">&quot;Nie hao&quot;</span>  <span class="token comment">#用户名</span>\n<span class="token function">git</span> config --global user.email <span class="token string">&quot;980380046@qq.com&quot;</span>  <span class="token comment">#邮箱</span>\n<span class="token comment"># 查看信息</span>\n<span class="token function">git</span> config -l\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="三-git架构" tabindex="-1"><a class="header-anchor" href="#三-git架构" aria-hidden="true">#</a> 三：Git架构</h2><p><img src="'+c+'" alt="image-20201210110408191"></p><h2 id="四-git基本操作" tabindex="-1"><a class="header-anchor" href="#四-git基本操作" aria-hidden="true">#</a> 四：Git基本操作</h2><blockquote><p>第一步：创建工作区</p></blockquote><p><img src="'+o+'" alt="image-20201210110557828"></p><blockquote><p>第二步：初始化git，生成本地仓库和暂存区</p></blockquote><p><img src="'+m+'" alt="image-20201210110847724"></p><blockquote><p>第三步：代码编写</p></blockquote><p><img src="'+b+'" alt="image-20201210111023441"></p><blockquote><p>第四步：将文件提交到暂存区，暂时存储</p></blockquote><p><img src="'+d+'" alt="image-20201210111205850"></p><p><img src="'+u+'" alt="image-20201210111408726"></p><blockquote><p>第五步：将暂存区的代码提交到本地仓库，生成一个git版本</p></blockquote><p><img src="'+g+'" alt="image-20201210111732097"></p><blockquote><p>看提交日志</p><p>git log</p></blockquote><p><img src="'+h+'" alt="image-20201210112015995"></p><blockquote><p>版本的切换</p><p>git checkout 版本号</p></blockquote><p><img src="'+k+'" alt="image-20201210112518250"></p><p>命令：</p><p>鼠标右键bash出现命令框</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>**1、git init  ---出现.git的文件夹**\n\n**2、git status  -- 查看状态**\n\n**3、git  <span class="token function">add</span>  <span class="token builtin class-name">.</span>     --加入暂存区；   <span class="token builtin class-name">.</span> 点是添加所有的、也可以使用具体文件名指定添加**\n\n**4、git commit -m <span class="token string">&quot;msg&quot;</span>    提交到本地仓库！并标记提示信息**\n\n**5、git log -- oneline    查看日志（简短）（会显示版本编号）**\n\n**6、git checkout  版本编号   -- 指定版本的切换！**\n\n**7、git push https://gitee.com/shine-niehao/fengming-mall.git master:master**\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上传到gitee</p><p>用户名：shine-niehao</p><p>密码：NIEhao662266</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Administrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest\n**$ <span class="token function">touch</span> a.txt**\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest\n**$ <span class="token function">touch</span> b.txt**\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest\n**$ <span class="token function">git</span> init**\nInitialized empty Git repository <span class="token keyword">in</span> D:/gittest/.git/\n\n\n**$ <span class="token function">git</span> <span class="token function">add</span> .**\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest <span class="token punctuation">(</span>master<span class="token punctuation">)</span>\n**$ <span class="token function">git</span> status**\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class="token punctuation">(</span>use <span class="token string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span>\n        new file:   a.txt\n        new file:   b.txt\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest <span class="token punctuation">(</span>master<span class="token punctuation">)</span>\n**$ <span class="token function">git</span> commit -m <span class="token string">&quot;first commit&quot;</span>**\n\n*** Please tell me <span class="token function">who</span> you are.\n\nRun\n\n  <span class="token function">git</span> config --global user.email <span class="token string">&quot;you@example.com&quot;</span>\n  <span class="token function">git</span> config --global user.name <span class="token string">&quot;Your Name&quot;</span>\n\nto <span class="token builtin class-name">set</span> your account<span class="token string">&#39;s default identity.\nOmit --global to set the identity only in this repository.\n\nfatal: unable to auto-detect email address (got &#39;</span>Administrator@WIN-4MJM4MGJBAT.<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token string">&#39;)\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n**$ git config --global user.name &quot;Nie hao&quot;  #用户名**\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n**$ git config --global user.email &quot;980380046@qq.com&quot;  #邮箱**\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n**$ git commit -m &quot;first commit&quot;**\n[master (root-commit) 9ad319e] first commit\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 a.txt\n create mode 100644 b.txt\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n**$ git log --oneline**\n9ad319e (HEAD -&gt; master) first commit\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n$ touch c.txt\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n**$ git add c.txt**\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n**$ git commit -m &quot;second commit&quot;**\n[master 69dec08] second commit\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 c.txt\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n**$ git log --oneline**\n69dec08 (HEAD -&gt; master) second commit\n9ad319e first commit\n\n\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest (master)\n**$ git checkout 9ad319e**\nNote: switching to &#39;</span>9ad319e<span class="token string">&#39;.\n\nYou are in &#39;</span>detached HEAD&#39; state. You can <span class="token function">look</span> around, <span class="token function">make</span> experimental\nchanges and commit them, and you can discard any commits you <span class="token function">make</span> <span class="token keyword">in</span> this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\n<span class="token keyword">do</span> so <span class="token punctuation">(</span>now or later<span class="token punctuation">)</span> by using -c with the switch command. Example:\n\n  <span class="token function">git</span> switch -c <span class="token operator">&lt;</span>new-branch-name<span class="token operator">&gt;</span>\n\nOr undo this operation with:\n\n  <span class="token function">git</span> switch -\n\nTurn off this advice by setting config variable advice.detachedHead to <span class="token boolean">false</span>\n\nHEAD is now at 9ad319e first commit\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest <span class="token variable"><span class="token punctuation">((</span><span class="token number">9</span>ad319e...<span class="token punctuation">))</span></span>\n**$ <span class="token function">git</span> checkout 69dec08**\nPrevious HEAD position was 9ad319e first commit\nHEAD is now at 69dec08 second commit\n\nAdministrator@WIN-4MJM4MGJBAT MINGW64 /d/gittest <span class="token variable"><span class="token punctuation">((</span><span class="token number">69</span>dec08...<span class="token punctuation">))</span></span>\n$\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br></div></div><h2 id="五-git远程仓库" tabindex="-1"><a class="header-anchor" href="#五-git远程仓库" aria-hidden="true">#</a> 五：Git远程仓库</h2><h3 id="_5-1-远程仓库选择" tabindex="-1"><a class="header-anchor" href="#_5-1-远程仓库选择" aria-hidden="true">#</a> 5.1：远程仓库选择</h3>',34),F=(0,e.Uk)("选择一：github("),S={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("https://github.com/"),K=(0,e.Uk)(") pass"),Q=(0,e.Uk)("选择二：码云("),V={href:"https://gitee.com/",target:"_blank",rel:"noopener noreferrer"},X=(0,e.Uk)("https://gitee.com/"),aa=(0,e.Uk)(") 【优选】"),na=(0,e.uE)('<p>选择三：使用GitLab搭建自己的远程仓库，企业开发首选（运维篇）</p><h3 id="_5-2-在码云上创建远程仓库" tabindex="-1"><a class="header-anchor" href="#_5-2-在码云上创建远程仓库" aria-hidden="true">#</a> 5.2：在码云上创建远程仓库</h3><p><img src="'+f+'" alt="image-20201210141241104"></p><p><img src="'+q+'" alt="image-20201210141551763"></p><p><img src="'+_+'" alt="image-20201210141716015"></p><h3 id="_5-3-远程仓库操作" tabindex="-1"><a class="header-anchor" href="#_5-3-远程仓库操作" aria-hidden="true">#</a> 5.3：远程仓库操作</h3><blockquote><p>push本地仓库代码到远程仓库</p><p>git push https://gitee.com/zhuximing/xiaomi-parent.git master:master</p><p>第一个master就是本地仓库的master分支</p><p>第二个master是远程仓库的master分支</p></blockquote><p><img src="'+x+'" alt="image-20201210142217376"></p><h4 id="_5-3-1-关联远程仓库" tabindex="-1"><a class="header-anchor" href="#_5-3-1-关联远程仓库" aria-hidden="true">#</a> 5.3.1：关联远程仓库</h4><table><thead><tr><th style="text-align:center;">git remote add origin url</th></tr></thead><tbody><tr><td style="text-align:center;"><img src="'+M+'" alt="image-20201206140807945"></td></tr></tbody></table><h4 id="_5-3-2-推送文件到远程仓库" tabindex="-1"><a class="header-anchor" href="#_5-3-2-推送文件到远程仓库" aria-hidden="true">#</a> 5.3.2 ：推送文件到远程仓库</h4><p><img src="'+y+'" alt="image-20201210143248193"></p><h4 id="_5-3-3-克隆远程仓库" tabindex="-1"><a class="header-anchor" href="#_5-3-3-克隆远程仓库" aria-hidden="true">#</a> 5.3.3：克隆远程仓库</h4><blockquote><p>将远程仓库的代码clone到本地</p><p>git clone https://gitee.com/zhuximing/xiaomi-parent.git -b master</p><p>-b 表示指定远程仓库的某个分支进行克隆</p><p>clone 只做一遍</p></blockquote><h4 id="_5-3-4-拉取远程仓库代码" tabindex="-1"><a class="header-anchor" href="#_5-3-4-拉取远程仓库代码" aria-hidden="true">#</a> 5.3.4：拉取远程仓库代码</h4><blockquote><p>git pull origin【url】master:master</p><p>第一个master是远程仓库的master分支</p><p>第二个master是本地仓库的分支</p></blockquote><h3 id="window缓存gitee的账户-密码写错修改措施" tabindex="-1"><a class="header-anchor" href="#window缓存gitee的账户-密码写错修改措施" aria-hidden="true">#</a> <strong>window缓存gitee的账户(密码写错修改措施)</strong></h3><p><img src="'+G+'" alt="image-20201210152626284"></p><h4 id="_5-3-5-多人协作代码冲突" tabindex="-1"><a class="header-anchor" href="#_5-3-5-多人协作代码冲突" aria-hidden="true">#</a> 5.3.5：多人协作代码冲突</h4><p>演示冲突：</p><p>jack前进一步</p><p>rose也前进一步</p><p>jack push 代码到远程仓库</p><p>rose push 代码到远程仓库</p><p>rose提示你需要先pull</p><p>rose pull代码 报错【reject】</p><p>涉及到三方合并【jack本地、rose本地、jack和rose前一个共同的版本】</p><p>三方合并的思路</p><p>第一步：git fetch origin ======&gt;将远程的.git信息下载到本地</p><p>第二步：git merge origin/master ==&gt;将远程的master手动合并到本地的master</p><p>第三步：合并报错，【conflit 合并冲突】</p><p>第四步：人工解决【协商最终的结果】</p><p>第五步：将合并的结果push到远程仓库</p><p>第六步：另一方将解决的结果pull下来</p><p>到此 冲突解决完毕！！！！！</p><p><img src="'+v+'" alt="image-20201210155857448"></p><h2 id="六-git分支" tabindex="-1"><a class="header-anchor" href="#六-git分支" aria-hidden="true">#</a> 六：Git分支</h2><h4 id="_6-1-为什么要有分支" tabindex="-1"><a class="header-anchor" href="#_6-1-为什么要有分支" aria-hidden="true">#</a> 6.1：为什么要有分支</h4><p><img src="'+N+'" alt="image-20201210170722995"></p><h4 id="_6-2-查看分支" tabindex="-1"><a class="header-anchor" href="#_6-2-查看分支" aria-hidden="true">#</a> 6.2：查看分支</h4><blockquote><p>git branch 查看本地的分支</p><p>git branch -r 查看远程的分支</p></blockquote><h4 id="_6-3-基于master创建分支-bankpay" tabindex="-1"><a class="header-anchor" href="#_6-3-基于master创建分支-bankpay" aria-hidden="true">#</a> 6.3：基于master创建分支（bankpay）</h4><blockquote><p>创建分支</p><p>git branch 分支名称</p></blockquote><h4 id="_6-4-分支切换命令" tabindex="-1"><a class="header-anchor" href="#_6-4-分支切换命令" aria-hidden="true">#</a> 6.4：分支切换命令</h4><blockquote><p>git checkout 分支名称</p></blockquote><h4 id="_6-5-将bankpay分支推到远程协同开发" tabindex="-1"><a class="header-anchor" href="#_6-5-将bankpay分支推到远程协同开发" aria-hidden="true">#</a> 6.5：将bankpay分支推到远程协同开发</h4><blockquote><p>git push origin bankpay:bankpay</p><p>第一个bankpay是本地仓库分支</p><p>第二个bankpay是远程仓库的分支，如果远程仓库没有该分支，会自动创建改分支</p></blockquote><h4 id="_6-6-aplipay分支合并到master" tabindex="-1"><a class="header-anchor" href="#_6-6-aplipay分支合并到master" aria-hidden="true">#</a> 6.6：aplipay分支合并到master</h4><blockquote><p>第一步：切换到master分支</p><p>git checkout master</p><p>第二步：合并（bankpay-&gt;master）</p><p>在本地完成合并</p><p>get merge bankpay</p><p>第三步：push到远程仓库master分支</p><p>git push origin master:master</p></blockquote><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><h2 id="七-idea中使用git" tabindex="-1"><a class="header-anchor" href="#七-idea中使用git" aria-hidden="true">#</a> 七：Idea中使用Git</h2><h4 id="_7-1-关联git" tabindex="-1"><a class="header-anchor" href="#_7-1-关联git" aria-hidden="true">#</a> 7.1 关联Git</h4><blockquote><p><a href="">File &gt; Settings</a> 关联过程是自动的</p></blockquote><p><img src="'+A+'" alt="image-20201211091826004"></p><h4 id="_7-2-创建本地仓库" tabindex="-1"><a class="header-anchor" href="#_7-2-创建本地仓库" aria-hidden="true">#</a> 7.2 创建本地仓库</h4><p><img src="'+I+'" alt="image-20201211092127617"></p><p>或者</p><p><img src="'+w+'" alt="image-20201211092222756"></p><blockquote><ul><li><p>新建项目后，在项目目录下创建为git仓库</p></li><li><p>注意： 要在建仓库前，设置<a href="">忽略文件 &quot;.gitignore&quot;</a></p><p>作用：被忽略的文件会被版本记录忽略，版本中不包含它们。比如.idea目录 、*.iml 、target</p><p>范围：不需要和其他开发共享的文件，具体见下图。</p></li></ul></blockquote><p>忽略文件或目录【如果文件或者目录加入了忽略列表，那么在add的时候以及在commit的时候该文件或目录直接忽略掉】</p><p>第一步：下载插件</p><p><img src="'+W+'" alt="image-20201211092646040"></p><p>第二步：使用插件，协助创建.gitignore文件</p><p><img src="'+J+'" alt="image-20201211092807773"></p><p><img src="'+T+'" alt="image-20201211093243769"></p><h4 id="_7-3-提交到本地仓库" tabindex="-1"><a class="header-anchor" href="#_7-3-提交到本地仓库" aria-hidden="true">#</a> 7.3 提交到本地仓库</h4><blockquote><p>创建好仓库后，做第一次提交。</p></blockquote><h4 id="_7-4-push到远程仓库" tabindex="-1"><a class="header-anchor" href="#_7-4-push到远程仓库" aria-hidden="true">#</a> 7.4：push到远程仓库</h4><p><img src="'+B+'" alt="image-20201211094639303"></p><p><img src="'+$+'" alt="image-20201211094435008"></p><p><img src="'+E+'" alt="image-20201211094549389"></p><h4 id="_7-5-克隆" tabindex="-1"><a class="header-anchor" href="#_7-5-克隆" aria-hidden="true">#</a> 7.5：克隆</h4><p><img src="'+j+'" alt="image-20201211095245097"></p><p><img src="'+D+'" alt="image-20201211095401693"></p><h4 id="_7-6-协同开发" tabindex="-1"><a class="header-anchor" href="#_7-6-协同开发" aria-hidden="true">#</a> 7.6：协同开发</h4><h4 id="_7-7-冲突演示和解决" tabindex="-1"><a class="header-anchor" href="#_7-7-冲突演示和解决" aria-hidden="true">#</a> 7.7：冲突演示和解决</h4><h4 id="_7-8分支操作" tabindex="-1"><a class="header-anchor" href="#_7-8分支操作" aria-hidden="true">#</a> 7.8分支操作</h4><h5 id="_7-8-0-查看分支" tabindex="-1"><a class="header-anchor" href="#_7-8-0-查看分支" aria-hidden="true">#</a> 7.8.0：查看分支</h5><p><img src="'+H+'" alt="image-20201211105534959"></p><h5 id="_7-8-1-新建分支" tabindex="-1"><a class="header-anchor" href="#_7-8-1-新建分支" aria-hidden="true">#</a> 7.8.1：新建分支</h5><p><img src="'+U+'" alt="image-20201211105719937"></p><h5 id="_7-8-2-上传分支到远程仓库" tabindex="-1"><a class="header-anchor" href="#_7-8-2-上传分支到远程仓库" aria-hidden="true">#</a> 7.8.2 上传分支到远程仓库</h5><h5 id="_7-8-3-分支合并" tabindex="-1"><a class="header-anchor" href="#_7-8-3-分支合并" aria-hidden="true">#</a> 7.8.3：分支合并</h5><h5 id="_7-8-4-合并结果push到远程" tabindex="-1"><a class="header-anchor" href="#_7-8-4-合并结果push到远程" aria-hidden="true">#</a> 7.8.4：合并结果push到远程</h5><h3 id="十、多人协同开发" tabindex="-1"><a class="header-anchor" href="#十、多人协同开发" aria-hidden="true">#</a> 十、多人协同开发</h3><hr><blockquote><p>多人开发协同，git操作</p></blockquote><h4 id="_10-1-项目管理员-项目经理" tabindex="-1"><a class="header-anchor" href="#_10-1-项目管理员-项目经理" aria-hidden="true">#</a> 10.1 项目管理员( 项目经理 )</h4><blockquote><p>1&gt; 由管理员负责创建一个远程库，初始的库中什么也没有，为裸库。库的名称建议和项目同名</p></blockquote><blockquote><p>2&gt; 管理员会在idea中创建一个初始项目,其中包含.gitignore文件。</p></blockquote><blockquote><p>3&gt; 管理员将本地库上传到远程库，同时创建一个dev分支</p></blockquote><blockquote><p>4&gt; 将其他开发人员拉入远程库的 <a href="">开发成员列表中</a> ，使得其他开发人员可以访问该远程库。</p><p>流程如下：</p></blockquote><blockquote><p>5&gt; master分支设置为 <a href="">protected分支</a>，只有管理员有权限将代码合并到其中。dev分支设置为 <a href="">常规分支</a>所有开发人员 都可以其中合并代码</p></blockquote><table><thead><tr><th style="text-align:center;">进入分支设置</th></tr></thead><tbody><tr><td style="text-align:center;"><img src="'+z+'" alt="保护分支1"></td></tr></tbody></table><table><thead><tr><th style="text-align:center;">设置保护分支，让master分支不能被随更改</th></tr></thead><tbody><tr><td style="text-align:center;"><img src="'+C+'" alt="保护分支2"></td></tr></tbody></table><h4 id="_10-2-开发人员" tabindex="-1"><a class="header-anchor" href="#_10-2-开发人员" aria-hidden="true">#</a> 10.2 开发人员</h4><blockquote><ul><li><p>初始化：在idea中clone 远程库，获得项目。会建立本地库</p></li><li><p>后续的开发中，都要在dev分支上进行。开发完一个功能并测试通过后就commit 提交到本地的dev分支中，然后 上传(push)到远程dev分支中。</p></li><li><p>需要更新项目内容时，通过 pull 从远程仓库拉取内容。</p></li><li><p>注意：多人协同时，每次在 push 到远程库前，都先做一次pull，一来是把远程最新内容合并到本地，二来是核实本地内容是否和远程内容有冲突。</p></li><li><p>后续的开发，会接到一个个的功能任务，往复操作 2&gt;、3&gt;、4&gt; 而已。</p></li></ul></blockquote>',97),sa={},ea=(0,s(83744).Z)(sa,[["render",function(a,n){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[O,(0,e._)("p",null,[Y,(0,e._)("a",P,[L,(0,e.Wm)(s)])]),R,(0,e._)("p",null,[F,(0,e._)("a",S,[Z,(0,e.Wm)(s)]),K]),(0,e._)("p",null,[Q,(0,e._)("a",V,[X,(0,e.Wm)(s)]),aa]),na],64)}]])}}]);